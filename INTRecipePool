----- INT Magnet Recipe Pool Query -----



/*
IMPORTANT NOTE: before running the query, update the HelloFresh weeks in the sku_cost_CPS and last_sku_cost_remps CTEs
depending on the preferred weeks EX: If the data to extract is for Q2 of 2023 then update the weeks to '2023-W13' AND '2023-W26'
*/




-------------------- COSTS & SKU COSTS CTEs --------------------



WITH sku_cost_CPS AS (
    SELECT market
         , distribution_center
         , code
         , avg(price) AS price
    FROM materialized_views.procurement_services_staticprices AS sp
    LEFT JOIN materialized_views.procurement_services_culinarysku AS sku
        ON sku.id=sp.culinary_sku_id
    WHERE  sku.market IN ('dkse','es','gb','ie','it','beneluxfr','dach') -- added beneluxfr
        AND sp.distribution_center IN ('SK','SP','GR','IE','IT','DH','VE') -- add DH
        AND sp.hellofresh_week >= '2024-W21'
        AND sp.hellofresh_week <= '2024-W25'
    GROUP BY 1,2,3
    )




-------------------- NUTRITION CTEs --------------------


    , nutrition_CPS AS (
        SELECT *
        FROM materialized_views.culinary_services_recipe_segment_nutrition
        WHERE (market IN ('dkse','it','ie','es','fr', 'benelux','dach') AND segment IN ('SE','IT','IE','ES','FR','NL','DE')) -- added benelux and NL
            OR (market='gb' AND country = 'GB')
     )




-------------------- RECIPE CONSOLIDATED CTE --------------------


    , recipe_consolidated_CPS AS
        (SELECT DISTINCT id,market,unique_recipe_code,recipe_code,version,status,is_default,title,subtitle,recipe_type,brand,
                        cloned_FROM,cloned_version,target_preferences,target_products,tags,label,difficulty,cooking_methods,
                        cuisine,dish_type,spiciness,primary_protein,primary_starch,primary_vegetable,primary_cheese,primary_dairy,
                        primary_dry_spice,primary_fresh_herb,primary_fruit,sauce_paste,secondary_protein,secondary_starch,
                        secondary_vegetable,secondary_cheese,secondary_dairy,secondary_dry_spice,secondary_fresh_herb,secondary_fruit,
                        tertiary_vegetable,main_protein,protein_cut,main_starch,main_vegetable,proteins,starches,vegetables,
                        used_week,total_time,hands_off_time,hands_off_time_max,hands_on_time,hands_on_time_max,active_cooking_time,
                        active_cooking_time_max,passive_cooking_time,passive_cooking_time_max,prep_time,prep_time_max,fun_fact_title,
                        fun_fact_description,created_by,main_image,image_url,internal_image,prep_info,chefs_notes,event_type,
                        created_at,published_at,updated_at,fk_imported_at,inserted_at
                        ,case when (tags like '%season-{season_type}%') then 1 else 0 end as isonseasonvariant
                        ,case when (tags like '%season-%' and tags not like '%season-{season_type}%') then 1 else 0 end as isoffseasonvariant
        FROM materialized_views.isa_services_recipe_consolidated
        )



----------- WEEK_PRESENT -----------


, dates_filter_t0 (
      select
        hellofresh_year,
        hellofresh_quarter,
        hellofresh_week
      from dimensions.date_dimension
      where 
        sk_date = date_format(getdate(),"yyyyMMdd")
)

, dates_filter_t10 (
    select * from (
      select
        *,
        row_number() over (order by hellofresh_week) as rn
      from 
        (select
            hellofresh_year,
            hellofresh_quarter,
            hellofresh_week
        from dimensions.date_dimension dd
        where 
            sk_date >= date_format(getdate(),"yyyyMMdd")
            and len(hellofresh_year)=4
        group by 1,2,3
        ) 
    ) where rn=11
)



-------------------- STEPS CTE --------------------


    , steps_CPS AS (
        SELECT r.id,
            steps.recipe_id,
            r.market,
            r.unique_recipe_code,
            concat_ws(" | ", collect_list(steps.description)) AS step_description
        FROM materialized_views.culinary_services_recipe_steps_translations AS steps
        JOIN recipe_consolidated_CPS AS r
            ON r.id = steps.recipe_id AND r.market = steps.market
        WHERE r.market IN ('dkse','es','fr','gb','ie','it', 'benelux', 'dach') -- added benelux
        GROUP BY 1,2,3,4
        )


-------------------- 2P SKU COUNT CTE --------------------

 , skucount_2p_CPS AS (
        SELECT market
                , segment_name
                , unique_recipe_code
                , concat_ws(" | ", collect_list(NAME)) AS skuname
                , count(DISTINCT code) AS skucount
                , concat_ws(" | ", collect_list(status)) AS sku_status
                , size
        FROM (
            SELECT r.market
                , p.segment_name
                , r.unique_recipe_code
                , p.code
                , regexp_replace(p.name, '\t|\n', '') AS NAME
                , skus.status
                , p.size
            FROM recipe_consolidated_CPS AS r
            JOIN materialized_views.culinary_services_recipe_procurement_picklist_culinarysku AS p
                ON r.id = p.recipe_id
            LEFT JOIN materialized_views.procurement_services_culinarysku AS skus
               ON skus.id = p.culinarysku_id
            WHERE r.market IN ('dkse','it','ie','gb','es','benelux','dach') -- added benelux
            AND p.segment_name IN ('SE', 'IT','IE','GR','ES','NL','DE') -- added NL
            AND p.size = 2
            GROUP BY 1, 2, 3, 4, 5, 6, 7) t
        GROUP BY 1,2,3,7
    )


 , skucount_2p_FR AS (
        SELECT unique_recipe_code
                , concat_ws(" | ", collect_list(NAME)) AS skuname
                , count(DISTINCT code) AS skucount
                , concat_ws(" | ", collect_list(status)) AS sku_status
                , size
        FROM (
            SELECT r.unique_recipe_code
                , p.code
                , regexp_replace(p.name, '\t|\n', '') AS NAME
                , skus.status
                , p.size
            FROM recipe_consolidated_CPS AS r
            JOIN materialized_views.culinary_services_recipe_procurement_picklist_culinarysku AS p
                ON r.id = p.recipe_id
            LEFT JOIN materialized_views.procurement_services_culinarysku AS skus
                    ON p.code = skus.code AND skus.market = 'beneluxfr'
            WHERE r.market = 'fr'
            AND p.segment_name = 'FR'
            AND p.size = 2
            GROUP BY 1, 2, 3, 4, 5) t
        GROUP BY 1,5
    )


-------------------- INACTIVE SKUS CTEs --------------------

, inactiveskus_CPS AS (
        SELECT market,
            segment_name,
            unique_recipe_code,
            concat_ws(" | ", collect_list(skucode)) AS inactiveskus,
            concat_ws(" | ", collect_list(skuname)) AS inactiveskunames,
            count(skuname) AS inactiveskus_count
        FROM (
                SELECT r.market
                    , p.segment_name
                    , r.unique_recipe_code
                    , p.code AS skucode
                    , regexp_replace(p.name, '\t|\n', '') AS skuname
                    , skus.status
                    , p.size
                FROM recipe_consolidated_CPS AS r
                JOIN materialized_views.culinary_services_recipe_procurement_picklist_culinarysku AS p
                    ON r.id = p.recipe_id
                LEFT JOIN materialized_views.procurement_services_culinarysku AS skus
                    ON skus.id = p.culinarysku_id
                WHERE r.market IN ('dkse','it','ie','gb','es', 'benelux','dach')
                AND p.segment_name IN ('SE', 'IT','IE','GR','ES', 'NL','DE')
                AND skus.status LIKE  '%Inactive%' OR skus.status LIKE  '%Archived%'
                AND p.size = 2
                GROUP BY 1, 2, 3, 4, 5, 6, 7
            ) t
        GROUP BY 1,2,3
        )

, inactiveskus_FR AS (
        SELECT market,
            segment_name,
            unique_recipe_code,
            concat_ws(" | ", collect_list(skucode)) AS inactiveskus,
            concat_ws(" | ", collect_list(skuname)) AS inactiveskusnames,
            count(skuname) AS inactiveskus_count
        FROM (
                SELECT r.market
                    , p.segment_name
                    , r.unique_recipe_code
                    , p.code AS skucode
                    , regexp_replace(p.name, '\t|\n', '') AS skuname
                    , skus.status
                    , p.size
                FROM recipe_consolidated_CPS AS r
                JOIN materialized_views.culinary_services_recipe_procurement_picklist_culinarysku AS p
                    ON r.id = p.recipe_id AND r.market = p.market
                JOIN (
                    select
                        code,
                        status,
                        market,
                        row_number() over (partition by code order by market desc) as rn
                    from materialized_views.procurement_services_culinarysku
                    where market in ('fr', 'beneluxfr') -- request by the market to add beneluxfr 04/17/2024
                )  AS skus
                    ON p.code = skus.code
                    AND r.market = 'fr'
                    AND p.segment_name = 'FR'
                    AND rn=1
                WHERE 1=1
                AND skus.status LIKE '%Inactive%' OR skus.status LIKE '%Archived%'
                AND p.size = 2
                GROUP BY 1, 2, 3, 4, 5, 6, 7
            ) t
        GROUP BY 1,2,3
        )


-------------------- RECIPE USAGE CTEs ---------------------


   , recipe_usage_DKSE AS (
    SELECT *
         , CASE
               WHEN last_used_running_week IS NOT  NULL AND next_used_running_week IS NOT  NULL
                   THEN next_used_running_week - last_used_running_week
               ELSE 0 END AS lastnextuseddiff
    FROM materialized_views.isa_services_recipe_usage AS r
    WHERE market = 'dkse' AND
          region_code = 'se'
    )


    , recipe_usage_CPS AS (
    SELECT * FROM materialized_views.isa_services_recipe_usage
    WHERE (region_code IN ('it','ie','es','fr','deat') AND market IN ('it','ie','es','fr','dach'))
        OR market = 'gb'
    )



    , recipe_usage_BNL as(
      select * from (
          select *, row_number() over(partition by recipe_code, market order by absolute_last_used desc) o  -- added BNL CTS
          from materialized_views.isa_services_recipe_usage
          where market = 'benelux' and region_code <> 'lu'
          ) t
      where o=1
      )

      , recipe_usage_GQ as(
    select * from (
        select *, row_number() over(partition by recipe_code, market order by absolute_last_used desc) o
        from materialized_views.ops_dap__gamp_recipe_usage_wo_draft
        where market = 'benelux' and region_code <> 'lu'
        ) t
    where o=1
    )


-------------------- VEGETABLE WEIGHT --------------------
,five_a_day as (
    select
        distinct culinary_sku_id
    from
        materialized_views.procurement_services_suppliersku_nutrition
    where
        five_a_day = 'Contributes'
    )


,veggie_gram_BNL as (
select
    r.unique_recipe_code
    ,coalesce(sum(sku.packaging_size * cs.servings_ratio) / 2, 0) as veggie_gram
from
    recipe_consolidated_CPS r
    inner join materialized_views.culinary_services_recipe_procurement_picklist_culinarysku cs on r.id = cs.recipe_id and cs.market = 'benelux' and cs.segment_name = 'NL' and cs.size = 2
    inner join materialized_views.procurement_services_culinarysku sku on sku.id = cs.culinarysku_id
where
    r.market = 'benelux'
group by
    1
)

,veggie_gram_fiveaday as (
select
    r.market,
    r.unique_recipe_code
    ,p.segment_name
    ,coalesce(SUM(p.pick_count*sku.packaging_size)/2, 0) as veggie_gram_fiveaday
from recipe_consolidated_CPS r
    join materialized_views.culinary_services_recipe_procurement_picklist_culinarysku p
        on r.id = p.recipe_id
        and (
            (r.market = 'benelux' and p.segment_name = 'NL')
            or (r.market = 'gb' and p.segment_name = 'GR')
            or (r.market = 'es' and p.segment_name = 'ES') -- not available
            or (r.market = 'it' and p.segment_name = 'IT') -- not available
            or (r.market = 'dkse' and p.segment_name = 'DK')
            or (r.market = 'fr' and p.segment_name = 'FR')
            or (r.market = 'ie' and p.segment_name = 'IE') --not available
            or (r.market = 'dach' and p.segment_name = 'DE')
            )
        and p.size = 2
    join materialized_views.procurement_services_culinarysku sku
        on sku.id = p.culinarysku_id
        and (
            (sku.market = 'beneluxfr' and p.segment_name = 'NL')
            or (sku.market = 'gb' and p.segment_name = 'GR')
            or (sku.market = 'es' and p.segment_name = 'ES') -- not available
            or (sku.market = 'it' and p.segment_name = 'IT') -- not available
            or (sku.market = 'dkse' and p.segment_name = 'DK')
            or (sku.market = 'fr' and p.segment_name = 'FR')
            or (sku.market = 'ie' and p.segment_name = 'IE') --not available
            or (sku.market = 'dach' and p.segment_name = 'DE')
            )
    join five_a_day fad
        on fad.culinary_sku_id = p.culinarysku_id
where 1=1
group by
    1, 2, 3
)

, phf_quantity as (
Select
    r.market,
    r.unique_recipe_code,
    r.recipe_code,
    r.title,
    r.dish_type,
    r.status,
    r.is_default,
    r.recipe_type,
    sum(sku.quantity_amount) as phf_quantity

from recipe_consolidated_CPS r
join materialized_views.culinary_services_recipe_procurement_picklist_culinarysku p
    on r.id=p.recipe_id
    and r.market = p.market
left join materialized_views.procurement_services_culinarysku sku
    on p.ingredient_id =  sku.ingredient_id
    and sku.market = p.market
    and sku.id = p.culinarysku_id
where
    p.size = 2
    and p.code like '%PHF%'
    and p.code <> 'PHF-00-102250-1' and p.code <> 'PHF-00-005129-4' and p.code <> 'PHF-00-005125-4' --potatoes
group by 1,2,3,4,5,6,7,8

)

, phf_quantity_IT as (
Select
    r.market,
    r.unique_recipe_code,
    r.recipe_code,
    r.title,
    r.dish_type,
    r.status,
    r.is_default,
    r.recipe_type,
    sum(sku.quantity_amount) as phf_quantity

from recipe_consolidated_CPS r
join materialized_views.culinary_services_recipe_procurement_picklist_culinarysku p
    on r.id=p.recipe_id
    and r.market = p.market
left join materialized_views.procurement_services_culinarysku sku
    on p.ingredient_id =  sku.ingredient_id
    and sku.market = p.market
    and sku.id = p.culinarysku_id
where
    p.size = 2
    and p.code like '%PHF%'
    and p.code <> 'PHF-00-102250-1' and p.code <> 'PHF-00-005129-4' and p.code <> 'PHF-00-005125-4' --potatoes
    and p.code <> 'PHF-00-005118-4'
        and p.code <> 'PHF-00-005086-4'
        and p.code <> 'PHF-00-005120-4'
        and p.code <> 'PHF-00-005122-4'
        and p.code <> 'PHF-00-005083-4'
        and p.code <> 'PHF-00-101204-4'
        and p.code <> 'PHF-00-124097-1'
        and p.code <> 'PHF-00-100409-1'
        and p.code <> 'PHF-00-005099-4'
        and p.code <> 'PHF-00-100401-1'
        and p.code <> 'PHF-00-005104-4'
        and p.code <> 'PHF-00-100407-1'
        and p.code <> 'PHF-00-005095-4'
        and p.code <> 'PHF-00-100398-1'
        and p.code <> 'PHF-00-005096-4'
        and p.code <> 'PHF-00-100402-1'
        and p.code <> 'PHF-00-005097-4'
        and p.code <> 'PHF-00-100400-1'
        and p.code <> 'PHF-00-005101-4'
        and p.code <> 'PHF-00-100404-1'
        and p.code <> 'PHF-00-005105-4'
        and p.code <> 'PHF-00-100408-1'
        and p.code <> 'PHF-00-116256-1'
        and p.code <> 'PHF-00-116255-1'
        and p.code <> 'PHF-00-119680-4'
        and p.code <> 'PHF-00-119679-4'
        and p.code <> 'PHF-00-119678-4'
        and p.code <> 'PHF-00-123897-1'
        and p.code <> 'PHF-00-123896-1'
        and p.code <> 'PHF-00-005127-4'
group by 1,2,3,4,5,6,7,8

)

-------------------- ALLERGEN CONTENT ------------------

     , allergens_CPS as (
        select
                unique_recipe_code,
                market,
            concat_ws(" | ", collect_list(allergens)) AS allergens
        from (
            select distinct r.market, r.unique_recipe_code, s.allergens FROM recipe_consolidated_CPS AS r
                        JOIN materialized_views.culinary_services_recipe_procurement_picklist_culinarysku AS p
                            ON r.id = p.recipe_id
                        left join
                            (select * from (
                                select distinct culinary_sku_id, allergens, row_number() over (partition by culinary_sku_id order by updated_at desc) as rn from materialized_views.procurement_services_suppliersku_nutrition s)
                                where rn=1) s
                            on p.culinarysku_id = s.culinary_sku_id
                        WHERE r.market IN ('dkse','it','ie','gb','es','benelux','dach') -- added benelux
                        AND p.segment_name IN ('SE', 'IT','IE','GR','ES','NL','DE')
            )
        group by 1,2
     )

     , pantry_milk_butter as (
        select
            p.market,
            recipe_id,
            max(case
                when pi.id is not null then 1
                else 0
            end) as flag_pantry_milk_butter
        from materialized_views.culinary_services_recipe_procurement_picklist_pantry_items p
        left join materialized_views.culinary_services_pantry_item pi
            on p.pantry_item_id = pi.id
            and p.market = pi.market
            and p.segment IN ('SE', 'IT','IE','GR','ES','NL','DE')
            and lower(pi.family) in ('milk', 'butter')
            and name != "pflanzliche Margarine*"
        group by 1,2
     )


-------------------- PICKLISTS CTEs --------------------


, picklists_DKSE AS (
        SELECT
                  unique_recipe_code
                , concat_ws(" | ", collect_list(code)) AS skucode
                , concat_ws(" | ", collect_list(NAME)) AS skuname
                , concat_ws(" | ", collect_list(ingredient_id)) AS ingredient_id
                , COUNT (DISTINCT code) AS skucount
                , SUM (cost2p) AS cost2p
                , SUM (cost3p) AS cost3p
                , SUM (cost4p) AS cost4p
                , size
        FROM (
            SELECT
                  r.unique_recipe_code
                , p.code
                , regexp_replace(p.name, '\t|\n', '') AS NAME
                , p.ingredient_id
                , SUM (CASE WHEN SIZE = 2 THEN pick_count * price ELSE 0 END) AS cost2p
                , SUM (CASE WHEN SIZE = 3 THEN pick_count * price ELSE 0 END) AS cost3p
                , SUM (CASE WHEN SIZE = 4 THEN pick_count * price ELSE 0 END) AS cost4p
                , p.size
            FROM recipe_consolidated_CPS AS r
            JOIN materialized_views.culinary_services_recipe_procurement_picklist_culinarysku AS p
                ON r.id = p.recipe_id
            LEFT JOIN (SELECT * FROM sku_cost_CPS WHERE market = 'dkse' AND distribution_center = 'SK') AS C
                ON C.code = p.code
            WHERE r.market = 'dkse'
            AND p.segment_name='SE'
            GROUP BY 1, 2, 3, 4,8) as t
        GROUP BY 1,9
    )


, picklists_ES AS (
    SELECT
    unique_recipe_code
    , concat_ws(" | ", collect_list(code)) AS skucode
    , concat_ws(" | ", collect_list(name)) AS skuname
    , concat_ws(" | ", collect_list(ingredient_id)) AS ingredient_id
    , count(DISTINCT code) AS skucount
    , sum(cost1p) AS cost1p
    , sum(cost2p) AS cost2p
    , sum(cost3p) AS cost3p
    , sum(cost4p) AS cost4p
    FROM (
        SELECT
         r.unique_recipe_code
        , p.code
        , regexp_replace(p.name, '\t|\n', '') AS name
        , p.ingredient_id
        , sum(CASE WHEN size = 1 THEN pick_count * price ELSE 0 end) AS cost1p
        , sum(CASE WHEN size = 2 THEN pick_count * price ELSE 0 end) AS cost2p
        , sum(CASE WHEN size = 3 THEN pick_count * price ELSE 0 end) AS cost3p
        , sum(CASE WHEN size = 4 THEN pick_count * price ELSE 0 end) AS cost4p
        FROM recipe_consolidated_CPS AS r
        JOIN materialized_views.culinary_services_recipe_procurement_picklist_culinarysku AS p ON r.id = p.recipe_id
        JOIN materialized_views.procurement_services_culinarysku AS pk ON p.code = pk.code
        LEFT JOIN (SELECT * FROM sku_cost_CPS WHERE market = 'es' AND distribution_center = 'SP') AS c ON c.code = p.code
        WHERE r.market = 'es'
            AND p.segment_name = 'ES'
        GROUP BY 1,2,3,4) t
    GROUP BY 1
)



, picklists_FR as(
    select
    unique_recipe_code
    , concat_ws(" | ", collect_list(code)) as skucode
    , concat_ws(" | ", collect_list(name)) as skuname
    , concat_ws(" | ", collect_list(ingredient_id)) AS ingredient_id
    , sum(cost1p) as cost1p
    , sum(cost2p) as cost2p
    , sum(cost3p) as cost3p
    , sum(cost4p) as cost4p
    from (
        select
         r.unique_recipe_code
        , p.code
        , regexp_replace(p.name, '\t|\n', '') as name
        , p.ingredient_id
        , sum(case when size = 1 then pick_count * price else 0 end) as cost1p
        , sum(case when size = 2 then pick_count * price else 0 end) as cost2p
        , sum(case when size = 3 then pick_count * price else 0 end) as cost3p
        , sum(case when size = 4 then pick_count * price else 0 end) as cost4p
        from recipe_consolidated_CPS AS r
        join materialized_views.culinary_services_recipe_procurement_picklist_culinarysku AS p ON r.id = p.recipe_id AND r.market = p.market
        join materialized_views.procurement_services_culinarysku AS pk on p.code = pk.code and pk.market = 'beneluxfr'
        left join (SELECT * FROM sku_cost_CPS WHERE market='beneluxfr' AND distribution_center = 'DH') AS c on c.code = p.code
        where r.market = 'fr' and p.segment_name = 'FR'
            --AND p.size = 2
        group by 1,2,3,4) t
    group by 1
)


, picklists_GB AS (
    SELECT
    unique_recipe_code
    , concat_ws(" | ", collect_list(code)) AS skucode
    , concat_ws(" | ", collect_list(name)) AS skuname
    , concat_ws(" | ", collect_list(ingredient_id)) AS ingredient_id
    , sum(cost1p) AS cost1p
    , sum(cost2p) AS cost2p
    , sum(cost3p) AS cost3p
    , sum(cost4p) AS cost4p
    FROM (
        SELECT
         r.unique_recipe_code
        , p.code
        , regexp_replace(p.name, '\t|\n', '') AS name
        , p.ingredient_id
        , sum(CASE WHEN size = 1 THEN pick_count * price ELSE 0 end) AS cost1p
        , sum(CASE WHEN size = 2 THEN pick_count * price ELSE 0 end) AS cost2p
        , sum(CASE WHEN size = 3 THEN pick_count * price ELSE 0 end) AS cost3p
        , sum(CASE WHEN size = 4 THEN pick_count * price ELSE 0 end) AS cost4p
        FROM recipe_consolidated_CPS AS r
        JOIN materialized_views.culinary_services_recipe_procurement_picklist_culinarysku AS p ON r.id = p.recipe_id AND r.market = p.market
        JOIN materialized_views.procurement_services_culinarysku AS pk ON p.code = pk.code AND p.market = pk.market
        LEFT JOIN (SELECT * FROM sku_cost_CPS WHERE market='gb' AND distribution_center = 'GR') AS c ON c.code = p.code
        WHERE r.market = 'gb' AND p.segment_name = 'GR' AND p.size = 2
        GROUP BY 1,2,3,4) t
    GROUP BY 1
)

, picklists_IE AS (
    SELECT market
    , segment_name
    , unique_recipe_code
    , concat_ws(" | ", collect_list(code)) AS skucode
    , concat_ws(" | ", collect_list(name)) AS skuname
    , concat_ws(" | ", collect_list(ingredient_id)) AS ingredient_id
    , count(DISTINCT code) AS skucount
    , SUM(cost1p) AS cost1p
    , SUM(cost2p) AS cost2p
    , SUM(cost3p) AS cost3p
    , SUM(cost4p) AS cost4p
    FROM (
        SELECT r.market
        , p.segment_name
        , r.unique_recipe_code
        , p.code
        , regexp_replace(p.name, '\t|\n', '') AS name
        , p.ingredient_id
        , sum(CASE WHEN size = 1 THEN pick_count * price ELSE 0 end) AS cost1p
        , sum(CASE WHEN size = 2 THEN pick_count * price ELSE 0 end) AS cost2p
        , sum(CASE WHEN size = 3 THEN pick_count * price ELSE 0 end) AS cost3p
        , sum(CASE WHEN size = 4 THEN pick_count * price ELSE 0 end) AS cost4p
        FROM recipe_consolidated_CPS AS r
        JOIN materialized_views.culinary_services_recipe_procurement_picklist_culinarysku AS p ON r.id = p.recipe_id
        JOIN materialized_views.procurement_services_culinarysku AS pk ON p.code = pk.code
        LEFT JOIN (SELECT * FROM sku_cost_CPS WHERE market = 'ie' AND distribution_center = 'IE') AS c ON c.code = p.code
        WHERE r.market = 'ie' AND p.segment_name = 'IE'
        GROUP BY  1,2,3,4,5,6) AS t
    GROUP BY 1,2,3
)


, picklists_IT AS (
    SELECT market
    , segment_name
    , unique_recipe_code
    , concat_ws(" | ", collect_list(code)) AS skucode
    , concat_ws(" | ", collect_list(name)) AS skuname
    , concat_ws(" | ", collect_list(ingredient_id)) AS ingredient_id
    , COUNT(DISTINCT code) AS skucount
    , SUM(cost1p) AS cost1p
    , SUM(cost2p) AS cost2p
    , SUM(cost3p) AS cost3p
    , SUM(cost4p) AS cost4p
    FROM (
        SELECT r.market
        , p.segment_name
        , r.unique_recipe_code
        , p.code
        , regexp_replace(p.name, '\t|\n', '') AS name
        , p.ingredient_id
        , SUM(CASE WHEN size = 1 THEN pick_count * price ELSE 0 END) AS cost1p
        , SUM(CASE WHEN size = 2 THEN pick_count * price ELSE 0 END) AS cost2p
        , SUM(CASE WHEN size = 3 THEN pick_count * price ELSE 0 END) AS cost3p
        , SUM(CASE WHEN size = 4 THEN pick_count * price ELSE 0 END) AS cost4p
        FROM recipe_consolidated_CPS AS r
        JOIN materialized_views.culinary_services_recipe_procurement_picklist_culinarysku AS p ON r.id = p.recipe_id AND r.market = p.market
        JOIN materialized_views.procurement_services_culinarysku AS pk ON p.code = pk.code AND p.market = pk.market
        LEFT JOIN (SELECT * FROM sku_cost_CPS WHERE market = 'it' AND distribution_center = 'IT') AS c ON c.code = p.code
        WHERE r.market='it'
            AND p.segment_name='IT'
        GROUP BY  1,2,3,4,5,6) AS t
    GROUP BY 1,2,3
)


, picklists_BNL as ( --added picklist for BNL
select
    unique_recipe_code
    , concat_ws(" | ", collect_list(code)) AS skucode
    , concat_ws(" | ", collect_list(name)) AS skuname
    , concat_ws(" | ", collect_list(ingredient_id)) AS ingredient_id
    , count(distinct code) as skucount
    , sum(cost1p) as cost1p
    , sum(cost2p) as cost2p
    , sum(cost3p) as cost3p
    , sum(cost4p) as cost4p
    , array_join(array_agg(price_missing_code), ' | ') as pricemissingskus
    , array_join(array_agg(price_missing_name), ' | ') as pricemissingskunames
    from (
        select
         r.unique_recipe_code
        , p.code
        , regexp_replace(p.name, '\t|\n', '') as name
        , p.ingredient_id
--         , c.packaging_type
        -- , c.status
        , case when price is null or price=0 then p.code else NULL end as price_missing_code
        , case when price is null or price=0 then p.name else NULL end as price_missing_name
        , sum(case when size = 1 then pick_count * price else 0 end) as cost1p
        , sum(case when size = 2 then pick_count * price else 0 end) as cost2p
        , sum(case when size = 3 then pick_count * price else 0 end) as cost3p
        , sum(case when size = 4 then pick_count * price else 0 end) as cost4p
        from recipe_consolidated_CPS r
        join materialized_views.culinary_services_recipe_procurement_picklist_culinarysku p on r.id = p.recipe_id and r.market = p.market
        left join (SELECT * FROM sku_cost_CPS WHERE market = 'beneluxfr' AND distribution_center = 'DH') c on c.code = p.code --and c.market = p.market
        where r.market = 'benelux' and p.segment_name = 'NL'
        group by 1,2,3,4,5,6) t
    group by 1
)


, picklists_DACH AS (
select
    unique_recipe_code
    , array_join(array_agg(code), ' | ') as skucode
    , array_join(array_agg(name), ' | ') as skuname
    , count(distinct code) as skucount
    , concat_ws(" | ", collect_list(ingredient_id)) AS ingredient_id
    , sum(cost1p) as cost1p
    , sum(cost2p) as cost2p
    , sum(cost3p) as cost3p
    , sum(cost4p) as cost4p
    , array_join(array_agg(price_missing), ' | ') as pricemissingskus
    from (
        select
         r.unique_recipe_code
        , p.code
        , regexp_replace(p.name, '\t|\n', '') as name
        , p.ingredient_id
        , case when price is null or price=0 then p.code else NULL end as price_missing
        , sum(case when size = 1 then pick_count * price else 0 end) as cost1p
        , sum(case when size = 2 then pick_count * price else 0 end) as cost2p
        , sum(case when size = 3 then pick_count * price else 0 end) as cost3p
        , sum(case when size = 4 then pick_count * price else 0 end) as cost4p
        from recipe_consolidated_CPS r
        join materialized_views.culinary_services_recipe_procurement_picklist_culinarysku p on r.id = p.recipe_id
        join materialized_views.procurement_services_culinarysku pk on p.code = pk.code
        left join (SELECT * FROM sku_cost_CPS WHERE market = 'dach' AND distribution_center = 'VE') c on c.code = p.code
        left join uploads.gamp_dach_singlepicks sp on sp.code= p.code
        where r.market = 'dach' and p.segment_name = 'DE'
        group by 1,2,3,4,5) t
    group by 1
)

, picklists_GQ as (
    select
        unique_recipe_code
        , concat_ws(" | ", collect_list(code)) AS skucode
        , concat_ws(" | ", collect_list(name)) AS skuname
        , concat_ws(" | ", collect_list(ingredient_id)) AS ingredient_id
        , count(distinct code) as skucount
        , sum(cost1p) as cost1p
        , sum(cost2p) as cost2p
        , sum(cost3p) as cost3p
        , sum(cost4p) as cost4p
        , array_join(array_agg(price_missing_code), ' | ') as pricemissingskus
        , array_join(array_agg(price_missing_name), ' | ') as pricemissingskunames
        from (
            select
            r.unique_recipe_code
            , p.code
            , regexp_replace(p.name, '\t|\n', '') as name
            , p.ingredient_id
    --         , c.packaging_type
            -- , c.status
            , case when price is null or price=0 then p.code else NULL end as price_missing_code
            , case when price is null or price=0 then p.name else NULL end as price_missing_name
            , sum(case when size = 1 then pick_count * price else 0 end) as cost1p
            , sum(case when size = 2 then pick_count * price else 0 end) as cost2p
            , sum(case when size = 3 then pick_count * price else 0 end) as cost3p
            , sum(case when size = 4 then pick_count * price else 0 end) as cost4p
            from recipe_consolidated_CPS r
            join materialized_views.culinary_services_recipe_procurement_picklist_culinarysku p on r.id = p.recipe_id and r.market = p.market
            left join (SELECT * FROM sku_cost_CPS WHERE market = 'beneluxfr' AND distribution_center = 'DH') c on c.code = p.code --and c.market = p.market
            where r.market = 'benelux' and p.segment_name = 'NL'
            group by 1,2,3,4,5,6) t
        group by 1
)


-------------------- FILTERED RECIPES CTE --------------------


, filtered_recipes_DKSE AS (
    SELECT *
    FROM (
         SELECT r.*
                , upper(r.market) AS country
                , round(p.cost2p,2) AS cost2p
                , round(p.cost3p,2) AS cost3p
                , round(p.cost4p,2) AS cost4p
                , p.skucode
                , p.skuname
                , p.skucount
                , p.ingredient_id
                , DENSE_RANK() OVER (PARTITION BY r.recipe_code, r.market
                                        ORDER BY r.version  DESC) AS o
        FROM recipe_consolidated_CPS AS r
        LEFT JOIN picklists_DKSE AS p
            ON p.unique_recipe_code=r.unique_recipe_code
        WHERE r.market = 'dkse'
            AND lower(r.status) NOT IN ('inactive','rejected')
            AND r.is_default = true
            AND LENGTH(r.primary_protein)>0
            AND r.primary_protein <>'N/A'
            AND p.cost2p > 0
    ) temp
    WHERE temp.o = 1
)


-------------------- ALL RECIPES CTEs --------------------


, all_recipes_DKSE AS (
    SELECT
             r.id AS uuid
            , r.country
            , r.unique_recipe_code AS uniquerecipecode
            , r.recipe_code AS code
            , r.version
            , r.status
            , regexp_replace(r.title, '\t|\n', '') AS title
            , concat(regexp_replace(r.title, '\t|\n', ''), coalesce(regexp_replace(r.subtitle, '\t|\n', ''),'') ,coalesce (r.primary_protein,''),coalesce(r.primary_starch,''),coalesce(r.cuisine,''), coalesce(r.dish_type,''), coalesce(r.primary_vegetable,'')) as subtitle
            , CASE WHEN r.primary_protein IS NULL OR r.primary_protein = '' THEN 'not available' ELSE r.primary_protein END AS primaryprotein
            , r.main_protein AS mainprotein
            , r.protein_cut AS proteincut
            , CASE WHEN r.primary_starch IS NULL OR r.primary_starch = '' THEN 'not available' ELSE r.primary_starch END AS primarystarch
            , r.main_starch AS mainstarch
            , CASE WHEN coalesce(r.primary_vegetable,'none') IS NULL OR coalesce(r.primary_vegetable,'none') = '' THEN 'not available' ELSE coalesce(r.primary_vegetable,'none') END AS primaryvegetable
            , r.main_vegetable AS mainvegetable
            , CASE WHEN n.fats IS NULL THEN 0 ELSE n.fats END AS fats
            , CASE WHEN n.sugars IS NULL THEN 0 ELSE n.sugars END AS sugars
            , CASE WHEN n.salt IS NULL THEN 0 ELSE n.salt END AS salt
            , CASE WHEN n.energy = 0 OR n.energy IS NULL THEN 0 ELSE n.energy END AS calories
            , CASE WHEN n.carbs = 0 OR n.carbs IS NULL THEN 0 ELSE n.carbs END AS carbohydrates
            , CASE WHEN n.proteins = 0 OR n.proteins IS NULL THEN 0 ELSE n.proteins END AS n_proteins
            , CASE WHEN n.saturatedfats IS NULL THEN 0 ELSE n.saturatedfats END AS saturatedfats
            , CASE WHEN r.cuisine IS NULL OR r.cuisine = '' THEN 'not available' ELSE r.cuisine END AS cuisine
            , CASE WHEN r.dish_type IS NULL OR r.dish_type = '' THEN 'not available' ELSE r.dish_type END AS dishtype
            , CASE WHEN r.hands_on_time ='' OR r.hands_on_time IS NULL THEN cast(99 AS FLOAT)
                ELSE cast(r.hands_on_time AS FLOAT) END AS handsontime
            , CASE WHEN r.hands_on_time_max ='' OR CAST(r.hands_off_time_max AS FLOAT)=0 OR r.hands_on_time_max IS NULL THEN cast(r.hands_on_time AS FLOAT)
                 ELSE cast(r.hands_on_time_max AS FLOAT) end
                  +
              CASE WHEN r.hands_off_time_max ='' OR CAST(r.hands_off_time_max AS FLOAT)=0 OR r.hands_off_time_max IS NULL THEN cast(r.hands_off_time AS FLOAT)
                 ELSE cast(r.hands_off_time_max AS FLOAT) end
                  AS totaltime
            , r.tags AS hqtag --only a filler
            , r.tags AS tag
            , CASE WHEN r.target_preferences IS NULL OR r.target_preferences = '' THEN 'not available' ELSE r.target_preferences END AS preference
            , concat (r.tags,r.target_preferences) AS preftag
            --, r.target_products AS producttype
            , CASE WHEN r.recipe_type IS NULL OR r.recipe_type = '' THEN 'not available' ELSE r.recipe_type END AS recipetype
            , r.created_by AS author
            --, r.label
            , r.skucode
            ,lower(r.skuname) AS skuname
            --, p.skucount
            , sc2p.skucount
            , i.inactiveskus
            , i.inactiveskunames
            , r.cost2p
            , r.cost4p
            , u.last_used AS lastused
            , CASE WHEN u.absolute_last_used IS NULL THEN '' ELSE u.absolute_last_used END AS absolutelastused
            , r.is_default AS isdefault
            , r.o
            , r.updated_at AS updated_at
            , CASE WHEN steps.step_description IS NULL OR steps.step_description LIKE  '% |  |  %' THEN 'not available' ELSE steps.step_description END AS step_description
            , r.image_url
            -- , a.previous_allergens
            -- , a.current_allergens
            -- , a.allergen_change
            -- , a.allergen_updated_at
            , 0 as veggie_gram
            , case when r.secondary_protein is null then "not available" else r.secondary_protein end as secondaryprotein
            , case when r.secondary_starch is null then "not available" else r.secondary_starch end as secondarystarch
            --, a.max_update
            , case when r.hands_on_time is null then 0 else r.hands_on_time end as handsontime_min
            , case when r.hands_on_time_max is null then 0 else r.hands_on_time_max end as handsontime_max
            , case when r.hands_off_time is null then 0 else r.hands_off_time end as handsofftime_min
            , case when r.hands_off_time_max is null then 0 else r.hands_off_time_max end as handsofftime_max
            , r.ingredient_id
            , 'not available' as primaryptn_check
            , 'not available' as primarysta_check
            , 'not available' as primaryveg_check
            , 'not available' as prefcs_check
            , 0 as phf_quantity
            , 0 as phf_quantity_extraveg
            , n.weight_in_grams
            , a.allergens
            , coalesce(pmb.flag_pantry_milk_butter,0) as flag_pantry_milk_butter
            , v.veggie_gram_fiveaday
            , r.target_products
    FROM filtered_recipes_DKSE AS r
        LEFT JOIN recipe_usage_DKSE AS u
            ON u.recipe_code = r.recipe_code
        LEFT JOIN (SELECT * FROM nutrition_CPS WHERE market = 'dkse' AND segment = 'SE') AS n
            ON n.recipe_id = r.id
       -- LEFT JOIN picklists_DKSE AS p
       --     ON p.unique_recipe_code=r.unique_recipe_code
        LEFT JOIN (SELECT * FROM inactiveskus_CPS WHERE market = 'dkse' AND segment_name = 'SE' ) AS i
            ON i.unique_recipe_code = r.unique_recipe_code --and ON p.skucode = i.skucode
        LEFT JOIN (SELECT * FROM skucount_2p_CPS WHERE market = 'dkse' AND segment_name = 'SE') AS sc2p
            ON sc2p.unique_recipe_code=r.unique_recipe_code
        LEFT JOIN (SELECT * FROM steps_CPS WHERE market='dkse') AS steps ON steps.recipe_id = r.id
        LEFT JOIN allergens_CPS AS a
            ON r.unique_recipe_code=a.unique_recipe_code
            AND r.market = a.market
        LEFT JOIN veggie_gram_fiveaday v
            on r.unique_recipe_code = v.unique_recipe_code
            and r.market = v.market
        LEFT JOIN pantry_milk_butter as pmb
            on r.id = pmb.recipe_id
            and r.market = pmb.market
    WHERE lower(r.status) NOT  IN ('inactive','rejected')
    ORDER BY 3
)


, all_recipes_ES AS (
SELECT * FROM(
SELECT r.id AS uuid
       ,upper(r.market) AS country
       ,r.unique_recipe_code AS uniquerecipecode
       ,r.recipe_code AS code
       ,r.version
       ,r.status
       ,regexp_replace(r.title, '\t|\n', '') AS title
       ,coalesce(regexp_replace(r.subtitle, '\t|\n', ''),'') AS subtitle
       --,concat(regexp_replace(r.title, '\t|\n', ''), coalesce(regexp_replace(r.subtitle, '\t|\n', ''),'') ,coalesce (r.primary_protein,''),coalesce(r.primary_starch,''),coalesce(r.cuisine,''), coalesce(r.dish_type,''), coalesce(r.primary_vegetable,'')) AS subtitle
       ,CASE WHEN r.primary_protein IS NULL OR r.primary_protein = "" THEN 'not available' ELSE r.primary_protein END AS primaryprotein
       ,r.main_protein AS mainprotein
       ,r.protein_cut AS proteincut
       ,CASE WHEN r.primary_starch IS NULL OR r.primary_starch = '' THEN 'not available' ELSE r.primary_starch END AS primarystarch
       ,r.main_starch AS mainstarch
       ,CASE WHEN coalesce(r.primary_vegetable,'none') IS NULL OR coalesce(r.primary_vegetable,'none') = '' THEN 'not available' ELSE r.primary_vegetable END AS primaryvegetable
       ,r.main_vegetable AS mainvegetable
       ,CASE WHEN n.fats IS NULL THEN 0 ELSE n.fats END AS fats
       ,CASE WHEN n.sugars IS NULL THEN 0 ELSE n.sugars END AS sugars
       ,CASE WHEN n.salt IS NULL THEN 0 ELSE n.salt END AS salt
       ,CASE WHEN n.energy = 0 OR n.energy IS NULL THEN 999 ELSE n.energy END AS calories
       ,CASE WHEN n.carbs = 0  OR n.carbs IS NULL THEN 999 ELSE n.carbs END AS carbohydrates
       ,CASE WHEN n.proteins = 0 OR n.proteins IS NULL THEN 999 ELSE n.proteins END AS n_proteins
       , CASE WHEN n.saturatedfats IS NULL THEN 0 ELSE n.saturatedfats END AS saturatedfats
       ,CASE WHEN r.cuisine IS NULL OR r.cuisine = '' THEN 'not available' ELSE r.cuisine END AS cuisine
       ,CASE WHEN r.dish_type IS NULL OR r.dish_type = '' THEN 'not available' ELSE r.dish_type END AS dishtype
       ,CASE WHEN r.hands_on_time ="" OR r.hands_on_time IS NULL THEN cast(99 AS FLOAT)
             ELSE cast(r.hands_on_time AS FLOAT) END AS handsontime
       ,cast(r.hands_on_time AS FLOAT) + cast(r.hands_off_time AS FLOAT)
              AS totaltime
       ,r.tags AS hqtag --only a filler
       ,r.tags AS tag
       ,CASE WHEN r.target_preferences IS NULL OR r.target_preferences = '' THEN 'not available' ELSE r.target_preferences END AS preference
       ,concat (r.tags,r.target_preferences) AS preftag
       ,CASE WHEN r.recipe_type IS NULL OR r.recipe_type = '' THEN 'not available' ELSE r.recipe_type END AS recipetype
       ,r.created_by AS author
       ,p.skucode
       ,lower(p.skuname) AS skuname
       --, p.skucount
       , sc2p.skucount
       , i.inactiveskus
       , i.inactiveskunames
       ,round(p.cost2p,2) AS cost2p
       ,round(p.cost4p,2) AS cost4p
     ,u.last_used AS lastused
     ,CASE WHEN u.absolute_last_used IS NULL THEN '' ELSE u.absolute_last_used END AS absolutelastused
     ,r.is_default AS isdefault
     ,DENSE_RANK() OVER (PARTITION BY r.recipe_code, r.market ORDER BY r.version  DESC) AS o
     ,r.updated_at AS updated_at --its NOT  unix timestamp
     ,CASE WHEN steps.step_description IS NULL OR steps.step_description LIKE  '% |  |  %' THEN 'not available' ELSE steps.step_description END AS step_description
     ,r.image_url
    --  , a.previous_allergens
    --  , a.current_allergens
    --  , a.allergen_change
    --  , a.allergen_updated_at
     , 0 as veggie_gram
    , case when r.secondary_protein is null then "not available" else r.secondary_protein end as secondaryprotein
    , case when r.secondary_starch is null then "not available" else r.secondary_starch end as secondarystarch
    , case when r.hands_on_time is null then 0 else r.hands_on_time end as handsontime_min
    , case when r.hands_on_time_max is null then 0 else r.hands_on_time_max end as handsontime_max
    , case when r.hands_off_time is null then 0 else r.hands_off_time end as handsofftime_min
    , case when r.hands_off_time_max is null then 0 else r.hands_off_time_max end as handsofftime_max
    , p.ingredient_id
    , 'not available' as primaryptn_check
    , 'not available' as primarysta_check
    , 'not available' as primaryveg_check
    , 'not available' as prefcs_check
    , 0 as phf_quantity
    , 0 as phf_quantity_extraveg
    , n.weight_in_grams
    , a.allergens
    , coalesce(pmb.flag_pantry_milk_butter,0) as flag_pantry_milk_butter
    , v.veggie_gram_fiveaday
    , r.target_products
FROM recipe_consolidated_CPS AS r
LEFT JOIN (SELECT * FROM recipe_usage_CPS WHERE region_code = 'es' AND market = 'es') AS u ON u.recipe_code = r.recipe_code
LEFT JOIN (SELECT * FROM nutrition_CPS WHERE market = 'es' AND segment = 'ES') AS n ON n.recipe_id = r.id
LEFT JOIN picklists_ES AS p ON p.unique_recipe_code=r.unique_recipe_code
LEFT JOIN (SELECT * FROM skucount_2p_CPS WHERE market = 'es' AND segment_name = 'ES') AS sc2p ON sc2p.unique_recipe_code=r.unique_recipe_code
LEFT JOIN (SELECT * FROM inactiveskus_CPS WHERE market = 'es' AND segment_name = 'ES' ) AS i ON p.unique_recipe_code = i.unique_recipe_code --and ON p.skucode = i.skucode
LEFT JOIN (SELECT * FROM steps_CPS WHERE market='es') AS steps ON steps.recipe_id = r.id
-- LEFT JOIN allergens AS a ON r.unique_recipe_code=a.unique_recipe_code
LEFT JOIN allergens_CPS AS a
    ON r.unique_recipe_code=a.unique_recipe_code
    AND r.market = a.market
LEFT JOIN veggie_gram_fiveaday v
    on r.unique_recipe_code = v.unique_recipe_code
    and r.market = v.market
LEFT JOIN pantry_milk_butter as pmb
    on r.id = pmb.recipe_id
    and r.market = pmb.market
WHERE lower(r.status) IN ('ready for menu planning')
    AND  r.market='es'
    AND  p.cost2p >0
    AND  p.cost4p >0
) temp
WHERE isdefault=1
ORDER BY 3
)


, all_recipes_FR AS (
SELECT * FROM(
SELECT  r.id as uuid
       ,upper(r.market) AS country
       ,r.unique_recipe_code AS uniquerecipecode
       ,r.recipe_code AS code
       ,r.version
       ,r.status
       ,regexp_replace(r.title, '\t|\n', '') AS title
       ,concat(regexp_replace(r.title, '\t|\n', ''), COALESCE(regexp_replace(r.subtitle, '\t|\n', ''),'') ,COALESCE(r.primary_protein,''),COALESCE(r.primary_starch,''),COALESCE(r.cuisine,''), COALESCE(r.dish_type,''), COALESCE(r.primary_vegetable,'')) AS subtitle
       ,r.primary_protein AS primaryprotein
       ,r.main_protein AS mainprotein
       ,r.protein_cut AS proteincut
       ,r.primary_starch AS primarystarch
       ,r.main_starch AS mainstarch
       ,COALESCE(r.primary_vegetable,'none') AS primaryvegetable
       ,r.main_vegetable AS mainvegetable
       ,CASE WHEN n.fats IS NULL THEN 0 ELSE n.fats END AS fats
       ,CASE WHEN n.sugars IS NULL THEN 0 ELSE n.sugars END AS sugars
       ,CASE WHEN n.salt IS NULL THEN 0 ELSE n.salt END AS salt
       ,CASE WHEN n.energy=0 THEN 999 ELSE n.energy END AS calories
       ,CASE WHEN n.carbs=0 THEN 999 ELSE n.carbs END AS carbohydrates
       ,CASE WHEN n.proteins = 0 OR n.proteins IS NULL THEN 999 ELSE n.proteins END AS n_proteins
       , CASE WHEN n.saturatedfats IS NULL THEN 0 ELSE n.saturatedfats END AS saturatedfats
       ,CASE WHEN r.cuisine IS NULL OR r.cuisine = '' THEN 'not available' ELSE r.cuisine END AS cuisine
       ,CASE WHEN r.dish_type IS NULL OR r.dish_type = '' THEN 'not available' ELSE r.dish_type END AS dishtype
       ,CASE WHEN r.hands_on_time ="" OR r.hands_on_time IS NULL THEN CAST(99 AS FLOAT)
             ELSE CAST(r.hands_on_time AS FLOAT) END AS handsontime
       ,CAST(r.hands_on_time AS FLOAT)
              +
        CAST(r.hands_off_time AS FLOAT) AS totaltime
       ,r.tags AS hqtag
       ,r.tags AS tag
       ,r.target_preferences AS preference
       ,concat (r.tags,r.target_preferences) AS preftag
       ,r.recipe_type AS recipetype
       ,r.created_by AS author
       ,p.skucode
       ,p.skuname
       ,sc2p.skucount
       ,i.inactiveskus
       ,i.inactiveskusnames
       --,round(p.cost1p,2) AS cost1p
       ,round(p.cost2p,2) AS cost2p
       --,round(p.cost3p,2) AS cost3p
       ,round(p.cost4p,2) AS cost4p
       ,u.last_used AS lastused
       ,CASE WHEN u.absolute_last_used IS NULL THEN '' ELSE u.absolute_last_used END AS absolutelastused
       --,COALESCE(CAST(u.is_newrecipe AS INTEGER),1) AS isnewrecipe
       --,COALESCE(CAST(u.is_newscheduled AS INTEGER),0) AS isnewscheduled
       ,r.is_default AS isdefault
       ,DENSE_RANK() OVER (PARTITION BY r.recipe_code, r.market ORDER BY r.version DESC) AS o
       ,r.updated_at AS updated_at --its NOT  unix timestamp
       ,CASE WHEN steps.step_description IS NULL OR steps.step_description LIKE  '% |  |  %' THEN 'not available' ELSE steps.step_description END AS step_description
       ,r.image_url
      --  , a.previous_allergens
      --  , a.current_allergens
      --  , a.allergen_change
      --  , a.allergen_updated_at
       , 0 as veggie_gram
       --, a.max_update
       , case when r.secondary_protein is null then "not available" else r.secondary_protein end as secondaryprotein
        , case when r.secondary_starch is null then "not available" else r.secondary_starch end as secondarystarch
        , case when r.hands_on_time is null then 0 else r.hands_on_time end as handsontime_min
        , case when r.hands_on_time_max is null then 0 else r.hands_on_time_max end as handsontime_max
        , case when r.hands_off_time is null then 0 else r.hands_off_time end as handsofftime_min
        , case when r.hands_off_time_max is null then 0 else r.hands_off_time_max end as handsofftime_max
        , p.ingredient_id
        , 'not available' as primaryptn_check
        , 'not available' as primarysta_check
        , 'not available' as primaryveg_check
        , 'not available' as prefcs_check
        , 0 as phf_quantity
        , 0 as phf_quantity_extraveg
        , n.weight_in_grams
        , a.allergens
        , coalesce(pmb.flag_pantry_milk_butter,0) as flag_pantry_milk_butter
        , v.veggie_gram_fiveaday
        , r.target_products
FROM recipe_consolidated_CPS AS r
LEFT JOIN (SELECT * FROM recipe_usage_CPS WHERE region_code = 'fr' AND market = 'fr') AS u ON  u.recipe_code = r.recipe_code
LEFT JOIN (SELECT * FROM nutrition_CPS WHERE market = 'fr' AND segment = 'FR') AS n ON n.recipe_id = r.id
LEFT JOIN picklists_FR AS p ON p.unique_recipe_code=r.unique_recipe_code
LEFT JOIN inactiveskus_FR AS i ON p.unique_recipe_code = i.unique_recipe_code --and ON p.skucode = i.skucode
LEFT JOIN skucount_2p_FR AS sc2p ON sc2p.unique_recipe_code=r.unique_recipe_code
LEFT JOIN (SELECT * FROM steps_CPS WHERE market='fr') AS steps ON steps.unique_recipe_code = r.unique_recipe_code
-- LEFT JOIN allergens AS a ON r.unique_recipe_code=a.unique_recipe_code
LEFT JOIN allergens_CPS AS a
    ON r.unique_recipe_code=a.unique_recipe_code
    AND r.market = a.market
LEFT JOIN veggie_gram_fiveaday v
    on r.unique_recipe_code = v.unique_recipe_code
    and r.market = v.market
LEFT JOIN pantry_milk_butter as pmb
    on r.id = pmb.recipe_id
    and r.market = pmb.market
WHERE LOWER(r.status) IN ('ready for menu planning','planned')
    AND  CASE WHEN LOWER(r.status)  IN ('ready for menu planning') THEN r.unique_recipe_code NOT LIKE'%NL%'
            ELSE TRUE  end
    AND  CASE WHEN (r.unique_recipe_code LIKE '%NL%' AND LOWER(r.tags) NOT LIKE '%demeter%') THEN u.absolute_last_used >='2021-W01'
            ELSE TRUE  end
    AND r.unique_recipe_code NOT LIKE 'K%'
    AND r.unique_recipe_code NOT LIKE 'T%'
    AND p.cost2p >0
    AND p.cost3p >0
    AND p.cost4p >0
    AND r.is_default =1
    AND r.market='fr'
) temp
)


, all_recipes_GB AS (
    SELECT *
    FROM (
        SELECT r.id AS uuid
            , upper (r.market) as country
            , r.unique_recipe_code AS uniquerecipecode
            , r.recipe_code AS code
            , r.version
            , r.status
            , regexp_replace(r.title, '\t|\n', '') AS title
            , concat(regexp_replace(r.title, '\t|\n', ''), coalesce (regexp_replace(r.subtitle, '\t|\n', ''), ''), coalesce (r.primary_protein, ''), coalesce (r.primary_starch, ''), coalesce (r.cuisine, ''), coalesce (r.dish_type, ''), coalesce (r.primary_vegetable, '')) AS subtitle
            , CASE WHEN r.primary_protein IS NULL OR r.primary_protein = '' THEN 'not available' ELSE r.primary_protein END AS primaryprotein
            , r.main_protein AS mainprotein
            , r.protein_cut AS proteincut
            , CASE WHEN r.primary_starch IS NULL OR r.primary_starch = '' THEN 'not available' ELSE r.primary_starch END AS primarystarch
            , r.main_starch AS mainstarch
            , coalesce (r.primary_vegetable, 'none') AS primaryvegetable
            , r.main_vegetable AS mainvegetable
            , CASE WHEN n.fats IS NULL THEN 0 ELSE n.fats END AS fats
            , CASE WHEN n.sugars IS NULL THEN 0 ELSE n.sugars END AS sugars
            , CASE WHEN n.salt IS NULL THEN 0 ELSE n.salt END AS salt
            , CASE WHEN n.energy = 0 OR n.energy IS NULL THEN 999 ELSE n.energy END AS calories
            , CASE WHEN n.carbs=0 THEN 999 ELSE n.carbs END AS carbohydrates
            , CASE WHEN n.proteins = 0 OR n.proteins IS NULL THEN 999 ELSE n.proteins END AS n_proteins
            , CASE WHEN n.saturatedfats IS NULL THEN 0 ELSE n.saturatedfats END AS saturatedfats
            , CASE WHEN r.cuisine IS NULL OR r.cuisine = '' THEN 'not available' ELSE r.cuisine END AS cuisine
            , CASE WHEN r.dish_type IS NULL OR r.dish_type = '' THEN 'not available' ELSE r.dish_type END AS dishtype
            , CASE WHEN r.hands_on_time_max ="" OR r.hands_on_time_max IS NULL or r.hands_on_time_max =0 THEN cast(r.hands_on_time AS FLOAT)
                ELSE cast(r.hands_on_time_max AS FLOAT) END AS handsontime
            , CASE WHEN CAST(r.hands_on_time_max AS FLOAT)=0 THEN CAST(r.hands_on_time AS FLOAT)
                   ELSE CAST(r.hands_on_time_max AS FLOAT) END
              +
              CASE WHEN CAST(r.hands_off_time_max AS FLOAT)=0 THEN CAST(r.hands_off_time AS INT)
                  ELSE cast (r.hands_off_time_max AS FLOAT)
                  END AS totaltime
            , r.tags AS hqtag                                                                                                                     --only a filler
            , r.tags AS tag
            , CASE WHEN r.target_preferences IS NULL OR r.target_preferences = '' THEN 'not available' ELSE r.target_preferences END AS preference
            , concat (r.tags, r.target_preferences) AS preftag
            , CASE WHEN r.recipe_type IS NULL OR r.recipe_type = '' THEN 'not available' ELSE r.recipe_type END AS recipetype
            , r.created_by AS author
            , p.skucode
            , lower (p.skuname) AS skuname
            , sc2p.skucount
            , i.inactiveskus
            , i.inactiveskunames
            , round(p.cost2p, 2) AS cost2p
            , round(p.cost4p, 2) AS cost4p
            , u.last_used AS lastused
            , CASE WHEN u.absolute_last_used IS NULL THEN '' ELSE u.absolute_last_used END AS absolutelastused
            --, coalesce (cast (u.is_newrecipe AS integer), 1) AS isnewrecipe
            --, coalesce (cast (u.is_newscheduled AS integer), 0) AS isnewscheduled
            , r.is_default AS isdefault
            , DENSE_RANK() OVER (PARTITION BY r.recipe_code, r.market ORDER BY r.version DESC) AS o
            , r.updated_at AS updated_at                                                                                                          --its NOT  unix timestamp
            , CASE WHEN steps.step_description IS NULL OR steps.step_description LIKE '% |  |  %' THEN 'not available' ELSE steps.step_description END AS step_description
            , r.image_url
            -- , a.previous_allergens
            -- , a.current_allergens
            -- , a.allergen_change
            -- , a.allergen_updated_at
          , 0 as veggie_gram
          , case when r.secondary_protein is null then "not available" else r.secondary_protein end as secondaryprotein
            , case when r.secondary_starch is null then "not available" else r.secondary_starch end as secondarystarch
            , case when r.hands_on_time is null then 0 else r.hands_on_time end as handsontime_min
            , case when r.hands_on_time_max is null then 0 else r.hands_on_time_max end as handsontime_max
            , case when r.hands_off_time is null then 0 else r.hands_off_time end as handsofftime_min
            , case when r.hands_off_time_max is null then 0 else r.hands_off_time_max end as handsofftime_max
          , p.ingredient_id
          , 'not available' as primaryptn_check
        , 'not available' as primarysta_check
        , 'not available' as primaryveg_check
        , 'not available' as prefcs_check
        , 0 as phf_quantity
        , 0 as phf_quantity_extraveg
        , n.weight_in_grams
        , a.allergens
        , coalesce(pmb.flag_pantry_milk_butter,0) as flag_pantry_milk_butter
        , v.veggie_gram_fiveaday
        , r.target_products
        FROM materialized_views.isa_services_recipe_consolidated AS r
        LEFT JOIN (SELECT * FROM recipe_usage_CPS WHERE market = 'gb') AS u ON u.recipe_code = r.recipe_code
        LEFT JOIN (SELECT * FROM nutrition_CPS WHERE market='gb' AND country='GB') AS n ON n.recipe_id = r.id
        LEFT JOIN picklists_GB AS p ON p.unique_recipe_code=r.unique_recipe_code
        LEFT JOIN (SELECT * FROM inactiveskus_CPS WHERE market = 'gb' AND segment_name = 'GR') AS i ON p.unique_recipe_code= i.unique_recipe_code --and ON p.skucode = i.skucode
        LEFT JOIN (SELECT * FROM skucount_2p_CPS WHERE market = 'gb' AND segment_name = 'GR') AS sc2p ON sc2p.unique_recipe_code=r.unique_recipe_code
        LEFT JOIN (SELECT * FROM steps_CPS WHERE market='gb') AS steps ON steps.unique_recipe_code = r.unique_recipe_code
        LEFT JOIN allergens_CPS AS a
            ON r.unique_recipe_code=a.unique_recipe_code
            AND r.market = a.market
        LEFT JOIN veggie_gram_fiveaday v
            on r.unique_recipe_code = v.unique_recipe_code
            and r.market = v.market
        LEFT JOIN pantry_milk_butter as pmb
            on r.id = pmb.recipe_id
            and r.market = pmb.market
        WHERE lower (r.status) IN ('ready for menu planning', 'final cook', 'external testing', 'in development')
        AND LOWER (r.title) NOT LIKE '%not use%' AND lower (r.title) NOT LIKE '%wrong%' AND lower (r.title) NOT LIKE '%test%' AND lower (r.title) NOT LIKE '%brexit%'
        AND r.primary_protein <>'White Fish - Coley'
        AND UPPER(r.unique_recipe_code) NOT LIKE '%MOD%'
        AND UPPER(r.unique_recipe_code) NOT LIKE 'GC%'
        AND LOWER(r.unique_recipe_code) NOT LIKE '%test%'
        AND UPPER(r.unique_recipe_code) NOT LIKE '%ASD%'
        AND UPPER(r.unique_recipe_code) NOT LIKE 'MK%'
        AND UPPER(r.unique_recipe_code) NOT LIKE 'A%'
        AND UPPER(r.unique_recipe_code) NOT LIKE 'X%'
        AND UPPER(r.unique_recipe_code) NOT LIKE 'BUND%'
        AND r.target_products NOT IN ('add-on', 'Baking kits', 'Breakfast', 'Sides', 'Dessert', 'Bread', 'Brunch', 'Cheese', 'Desserts', 'Modularity', 'Ready Meals', 'Speedy lunch', 'Speedy Lunch', 'Soup')
        AND r.market='gb'
        AND UPPER(r.unique_recipe_code) NOT LIKE 'C%'
--and r.is_default=true
        ) temp
--WHERE o=1)
        )


, all_recipes_IE AS (
SELECT * FROM(
SELECT r.id AS uuid
       ,upper(r.market) AS country
       ,r.unique_recipe_code AS uniquerecipecode
       ,r.recipe_code AS code
       ,r.version
       ,r.status
       ,regexp_replace(r.title, '\t|\n', '') AS title
       ,concat(regexp_replace(r.title, '\t|\n', ''), coalesce(regexp_replace(r.subtitle, '\t|\n', ''),'') ,coalesce (r.primary_protein,''),coalesce(r.primary_starch,''),coalesce(r.cuisine,''), coalesce(r.dish_type,''), coalesce(r.primary_vegetable,'')) AS subtitle
       ,CASE WHEN r.primary_protein IS NULL OR r.primary_protein = "" THEN 'not available' ELSE r.primary_protein END AS primaryprotein
       ,r.main_protein AS mainprotein
       ,r.protein_cut AS proteincut
       ,CASE WHEN r.primary_starch IS NULL OR r.primary_starch = '' THEN 'not available' ELSE r.primary_starch END AS primarystarch
       ,r.main_starch AS mainstarch
       ,CASE WHEN coalesce(r.primary_vegetable,'none') IS NULL OR coalesce(r.primary_vegetable,'none') = '' THEN 'not available' ELSE r.primary_vegetable END AS primaryvegetable
       ,r.main_vegetable AS mainvegetable
       ,CASE WHEN n.fats IS NULL THEN 0 ELSE n.fats END AS fats
       ,CASE WHEN n.sugars IS NULL THEN 0 ELSE n.sugars END AS sugars
       ,CASE WHEN n.salt IS NULL THEN 0 ELSE n.salt END AS salt
       ,CASE WHEN n.energy = 0 OR n.energy IS NULL THEN 999 ELSE n.energy END AS calories
       ,CASE WHEN n.carbs = 0  OR n.carbs IS NULL THEN 999 ELSE n.carbs END AS carbohydrates
       ,CASE WHEN n.proteins = 0 OR n.proteins IS NULL THEN 999 ELSE n.proteins END AS n_proteins
       , CASE WHEN n.saturatedfats IS NULL THEN 0 ELSE n.saturatedfats END AS saturatedfats
       ,CASE WHEN r.cuisine IS NULL OR r.cuisine = '' THEN 'not available' ELSE r.cuisine END AS cuisine
       ,CASE WHEN r.dish_type IS NULL OR r.dish_type = '' THEN 'not available' ELSE r.dish_type END AS dishtype
       , CASE WHEN r.hands_on_time_max ="" OR r.hands_on_time_max IS NULL or r.hands_on_time_max =0 THEN cast(r.hands_on_time AS FLOAT)
                ELSE cast(r.hands_on_time_max AS FLOAT) END AS handsontime
       ,CASE WHEN r.hands_on_time_max ="" OR CAST(r.hands_off_time_max AS FLOAT)=0  OR r.hands_on_time_max IS NULL THEN cast(r.hands_on_time AS FLOAT)
             ELSE cast(r.hands_on_time_max AS FLOAT) end
              +
        CASE WHEN r.hands_off_time_max ="" OR CAST(r.hands_off_time_max AS FLOAT)=0  OR r.hands_off_time_max IS NULL THEN cast(r.hands_off_time AS FLOAT)
             ELSE cast(r.hands_off_time_max AS FLOAT) end
              AS totaltime
       ,r.tags AS hqtag --only a filler
       ,r.tags AS tag
       ,CASE WHEN r.target_preferences IS NULL OR r.target_preferences = '' THEN 'not available' ELSE r.target_preferences END AS preference
       ,concat (r.tags,r.target_preferences) AS preftag
       ,CASE WHEN r.recipe_type IS NULL OR r.recipe_type = '' THEN 'not available' ELSE r.recipe_type END AS recipetype
       ,r.created_by AS author
       ,p.skucode
       ,lower(p.skuname) AS skuname
       , sc2p.skucount
       , i.inactiveskus
       , i.inactiveskunames
       --,round(p.cost1p,2) AS cost1p
       ,round(p.cost2p,2) AS cost2p
       --,round(p.cost3p,2) AS cost3p
       ,round(p.cost4p,2) AS cost4p
     ,u.last_used AS lastused
     ,CASE WHEN u.absolute_last_used IS NULL THEN '' ELSE u.absolute_last_used END AS absolutelastused
     --,coalesce(cast(u.is_newrecipe AS integer),1) AS isnewrecipe
     --,coalesce(cast(u.is_newscheduled AS integer),0) AS isnewscheduled
     ,r.is_default AS isdefault
     ,DENSE_RANK() OVER (PARTITION BY r.recipe_code, r.market ORDER BY r.version  DESC) AS o
     ,r.updated_at AS updated_at --its NOT  unix timestamp
     ,CASE WHEN steps.step_description IS NULL OR steps.step_description LIKE  '% |  |  %' THEN 'not available' ELSE steps.step_description END AS step_description
     ,r.image_url
    --  , a.previous_allergens
    --  , a.current_allergens
    --  , a.allergen_change
    --  , a.allergen_updated_at
        , 0 as veggie_gram
        , case when r.secondary_protein is null then "not available" else r.secondary_protein end as secondaryprotein
        , case when r.secondary_starch is null then "not available" else r.secondary_starch end as secondarystarch
        , case when r.hands_on_time is null then 0 else r.hands_on_time end as handsontime_min
        , case when r.hands_on_time_max is null then 0 else r.hands_on_time_max end as handsontime_max
        , case when r.hands_off_time is null then 0 else r.hands_off_time end as handsofftime_min
        , case when r.hands_off_time_max is null then 0 else r.hands_off_time_max end as handsofftime_max
        , p.ingredient_id
        , 'not available' as primaryptn_check
        , 'not available' as primarysta_check
        , 'not available' as primaryveg_check
        , 'not available' as prefcs_check
        , 0 as phf_quantity
        , 0 as phf_quantity_extraveg
        , n.weight_in_grams
        , a.allergens
        , coalesce(pmb.flag_pantry_milk_butter,0) as flag_pantry_milk_butter
        , v.veggie_gram_fiveaday
        , r.target_products
FROM recipe_consolidated_CPS AS r
LEFT JOIN (SELECT * FROM recipe_usage_CPS WHERE region_code = 'ie' AND market = 'ie') AS u ON u.recipe_code = r.recipe_code
LEFT JOIN (SELECT * FROM nutrition_CPS WHERE market = 'ie' AND segment = 'IE') AS n ON n.recipe_id = r.id
LEFT JOIN picklists_IE AS p ON p.unique_recipe_code=r.unique_recipe_code
LEFT JOIN (SELECT * FROM skucount_2p_CPS WHERE market = 'ie' AND segment_name = 'IE') AS sc2p ON sc2p.unique_recipe_code=r.unique_recipe_code
LEFT JOIN (SELECT * FROM inactiveskus_CPS WHERE market = 'ie' AND segment_name = 'IE' ) AS i ON p.unique_recipe_code = i.unique_recipe_code --and ON p.skucode = i.skucode
LEFT JOIN (SELECT * FROM steps_CPS WHERE market='ie') AS steps ON steps.recipe_id = r.id
-- LEFT JOIN allergens AS a ON r.unique_recipe_code=a.unique_recipe_code
LEFT JOIN allergens_CPS AS a
    ON r.unique_recipe_code=a.unique_recipe_code
    AND r.market = a.market
LEFT JOIN veggie_gram_fiveaday v
    on r.unique_recipe_code = v.unique_recipe_code
    and r.market = v.market
LEFT JOIN pantry_milk_butter as pmb
    on r.id = pmb.recipe_id
    and r.market = pmb.market
WHERE lower(r.status) IN ('ready for menu planning')
    AND  r.market='ie'
    AND p.cost2p >0
    AND p.cost4p >0
) temp
WHERE isdefault=1)


, all_recipes_IT AS (
SELECT * FROM(
SELECT r.id AS uuid
       ,upper(r.market) AS country
       ,r.unique_recipe_code AS uniquerecipecode
       ,r.recipe_code AS code
       ,r.version
       ,r.status
       ,regexp_replace(r.title, '\t|\n', '') AS title
       ,concat(regexp_replace(r.title, '\t|\n', ''), coalesce(regexp_replace(r.subtitle, '\t|\n', ''),'') ,coalesce (r.primary_protein,''),coalesce(r.primary_starch,''),coalesce(r.cuisine,''), coalesce(r.dish_type,''), coalesce(r.primary_vegetable,'')) AS subtitle
       ,CASE WHEN r.primary_protein IS NULL OR r.primary_protein = "" THEN 'not available' ELSE r.primary_protein END AS primaryprotein
       ,r.main_protein AS mainprotein
       ,r.protein_cut AS proteincut
       ,CASE WHEN r.primary_starch IS NULL OR r.primary_starch = '' THEN 'not available' ELSE r.primary_starch END AS primarystarch
       ,r.main_starch AS mainstarch
       ,CASE WHEN coalesce(r.primary_vegetable,'none') IS NULL OR coalesce(r.primary_vegetable,'none') = '' THEN 'not available' ELSE r.primary_vegetable END AS primaryvegetable
       ,r.main_vegetable AS mainvegetable
       ,CASE WHEN n.fats IS NULL THEN 0 ELSE n.fats END AS fats
       ,CASE WHEN n.sugars IS NULL THEN 0 ELSE n.sugars END AS sugars
       ,CASE WHEN n.salt IS NULL THEN 0 ELSE n.salt END AS salt
       ,CASE WHEN n.energy = 0 OR n.energy IS NULL THEN 0 ELSE n.energy END AS calories
       ,CASE WHEN n.carbs = 0  OR n.carbs IS NULL THEN 0 ELSE n.carbs END AS carbohydrates
       ,CASE WHEN n.proteins = 0 OR n.proteins IS NULL THEN 0 ELSE n.proteins END AS n_proteins
       , CASE WHEN n.saturatedfats IS NULL THEN 0 ELSE n.saturatedfats END AS saturatedfats
       ,CASE WHEN r.cuisine IS NULL OR r.cuisine = '' THEN 'not available' ELSE r.cuisine END AS cuisine
       ,CASE WHEN r.dish_type IS NULL OR r.dish_type = '' THEN 'not available' ELSE r.dish_type END AS dishtype
       ,CASE WHEN r.hands_on_time_max ="" OR r.hands_on_time_max IS NULL THEN cast(99 AS FLOAT)
             ELSE cast(r.hands_on_time_max AS FLOAT) END AS handsontime
       ,CASE WHEN r.hands_on_time_max ="" OR CAST(r.hands_off_time_max AS FLOAT)=0  OR r.hands_on_time_max IS NULL THEN cast(99 AS FLOAT)
             ELSE cast(r.hands_on_time_max AS FLOAT) END
              +
        CASE WHEN r.hands_off_time_max ="" OR CAST(r.hands_off_time_max AS FLOAT)=0  OR r.hands_off_time_max IS NULL THEN cast(99 AS FLOAT)
             ELSE cast(r.hands_off_time_max AS FLOAT) END AS totaltime
       ,r.tags AS hqtag --only a filler
       ,r.tags AS tag
       ,CASE WHEN r.target_preferences IS NULL OR r.target_preferences = '' THEN 'not available' ELSE r.target_preferences END AS preference
       ,concat (r.tags,r.target_preferences) AS preftag
       ,CASE WHEN r.recipe_type IS NULL OR r.recipe_type = '' THEN 'not available' ELSE r.recipe_type END AS recipetype
       ,r.created_by AS author
       ,p.skucode
       ,lower(p.skuname) AS skuname
       , p.skucount
       --, sc2p.skucount
       , i.inactiveskus
       , i.inactiveskunames
       ,round(p.cost2p,2) AS cost2p
       ,round(p.cost4p,2) AS cost4p
     ,u.last_used AS lastused
     ,CASE WHEN u.absolute_last_used IS NULL THEN '' ELSE u.absolute_last_used END AS absolutelastused
     --,COALESCE(CAST(u.is_newrecipe AS integer),1) AS isnewrecipe
     --,COALESCE(CAST(u.is_newscheduled AS integer),0) AS isnewscheduled
     ,r.is_default AS isdefault
     ,DENSE_RANK() OVER (PARTITION BY r.recipe_code, r.market ORDER BY r.version  DESC) AS o
     ,r.updated_at AS updated_at --its NOT  unix timestamp
     ,CASE WHEN steps.step_description IS NULL OR steps.step_description LIKE  '% |  |  %' THEN 'not available' ELSE steps.step_description END AS step_description
     ,r.image_url
    --  , a.previous_allergens
    --  , a.current_allergens
    --  , a.allergen_change
    --  , a.allergen_updated_at
    , 0 as veggie_gram
    , case when r.secondary_protein is null then "not available" else r.secondary_protein end as secondaryprotein
    , case when r.secondary_starch is null then "not available" else r.secondary_starch end as secondarystarch
    , case when r.hands_on_time is null then 0 else r.hands_on_time end as handsontime_min
    , case when r.hands_on_time_max is null then 0 else r.hands_on_time_max end as handsontime_max
    , case when r.hands_off_time is null then 0 else r.hands_off_time end as handsofftime_min
    , case when r.hands_off_time_max is null then 0 else r.hands_off_time_max end as handsofftime_max
    , p.ingredient_id
    , case
        when p.skucode like '%PTN-00-125057-2%' then 'Pork - Sausage'
        when p.skucode like '%PTN-00-125061-2%' then 'Pork - Boneless Loin'
        when p.skucode like '%PTN-00-125036-2%' then 'Mixed - Mince'
        when p.skucode like '%PTN-00-125059-2%' then 'Beef - Premium Steak'
        when p.skucode like '%PTN-00-125059-2%' then 'Beef - Steak'
        when p.skucode like '%PTN-00-125059-2%' then 'Beef - Strips'
        when p.skucode like '%PTN-00-125058-2%' then 'Beef - Strips'
        when p.skucode like '%PTN-00-101142-2%' then 'Pork - Sausage'
        when p.skucode like '%PTN-00-005670-2%' then 'Chicken - Mince'
        when p.skucode like '%PTN-00-005062-4%' then 'Chicken - Thigh'
        when p.skucode like '%PTN-00-121976-2%' then 'Pork - Bonless Precooked'
        when p.skucode like '%PTN-00-100733-2%' then 'Pork - Boneless Loin'
        when p.skucode like '%PTN-00-005073-4%' then 'Mixed - Mince'
        when p.skucode like '%PTN-00-005058-4%' then 'Chicken - Breast'
        when p.skucode like '%PTN-00-129594-4%' then 'Veal - Pieces'
        when p.skucode like '%PTN-00-128511-2%' then 'Beef - Premium Steak'
        when p.skucode like '%PTN-00-122770-2%' then 'Pork - Boneless Loin'
        when p.skucode like '%PTN-00-115860-4%' then 'Beef - Premium Steak'
        when p.skucode like '%DRY-00-005205-4%' then 'Ravioli - Fish'
        when p.skucode like '%PTN-00-121215-4%' then 'Chicken - Meatballs'
        when p.skucode like '%PTN-00-120997-4%' then 'Fish - Salmon (Fillet) Skin-On'
        when p.skucode like '%PTN-00-101141-2%' then 'Pork - Sausage'
        when p.skucode like '%PTN-00-120996-4%' then 'White Fish - Cod'
        when p.skucode like '%PTN-00-120484-2%' then 'Beef - Steak'
        when p.skucode like '%PTN-00-130399-4%' then 'White Fish - Saithe'
        when p.skucode like '%PTN-00-127449-2%' then 'Pork - Pulled pork'
        when p.skucode like '%PTN-00-100961-2%' then 'White Fish - Sea Bream'
        when p.skucode like '%PTN-00-119119-4%' then 'Beef - Strips'
        when p.skucode like '%PTN-00-125019-2%' then 'Mixed - Mince'
        when p.skucode like '%PTN-00-102003-2%' then 'Pork - Sausage'
        when p.skucode like '%PTN-00-102276-2%' then 'Fish - Salmon (Smoked)'
        when p.skucode like '%PTN-00-124713-2%' then 'Pork - Bacon (Strips)'
        when p.skucode like '%PTN-00-128901-4%' then 'Seafood - Shrimp'
        when p.skucode like '%PTN-00-101621-1%' then 'Fish Canned - mackerel on olive oil'
        when p.skucode like '%PTN-00-102086-2%' then 'Pork - Nduja'
        when p.skucode like '%PTN-00-005720-2%' then 'Pork - Bacon (Cubed)'
        when p.skucode like '%PTN-00-005068-4%' then 'Pork - Bacon (Cubed)'
        when p.skucode like '%PTN-00-005067-4%' then 'Pork - Prosciutto'
        when p.skucode like '%PTN-00-101622-1%' then 'Fish Canned - Anchovies'
        when p.skucode like '%PTN-00-129845-4%' then 'Seafood - Cuttlefish'
        --Veggie Proteins
        when dishtype<>'Patties/Fritters' then
          case
           when p.skucode like '%PTN-00-122031-4%' then 'Veggie - Seitan'
            when p.skucode like '%PTN-00-130052-4%' then 'Veggie - Chicken Nuggets'
            when p.skucode like '%SPI-00-121306-1%' then 'Veggie - Falafel'
            when p.skucode like '%PTN-00-120459-4%' then 'Veggie - Tofu'
            when p.skucode like '%PTN-00-125162-2%' then 'Egg - Boiled'
            when p.skucode like '%PTN-00-125161-2%' then 'Egg - Scrambled'
            when p.skucode like '%PHF-00-102248-1%' then 'Veggie Mushrooms - None'
            when p.skucode like '%PHF-00-124387-1%' then 'Veggie Mushrooms - None'
            when p.skucode like '%PHF-00-005113-4%' then 'Veggie Mushrooms - None'
            when p.skucode like '%PHF-00-005113-4%' then 'Veggie Mushrooms - None'
            when p.skucode like '%PHF-00-122456-4%' then 'Veggie Mushrooms - None'
            when p.skucode like '%PHF-00-122456-4%' then 'Veggie Mushrooms - None'
            when p.skucode like '%PHF-00-005115-4%' then 'Veggie Mushrooms - None'
            when p.skucode like '%PHF-00-102239-1%' then 'Veggie Mushrooms - Shiitake'
            when p.skucode like '%DAI-00-129844-4%' then 'Veggie Cheese - Brie'
            when p.skucode like '%DAI-00-005156-4%' then 'Veggie Cheese - Casera'
            when p.skucode like '%DAI-00-005150-4%' then 'Veggie Cheese - Halloumi'
            when p.skucode like '%DAI-00-005150-4%' then 'Veggie Cheese - Halloumi'
            when p.skucode like '%DAI-00-005155-4%' then 'Veggie Cheese - Taleggio'
            when p.skucode like '%DAI-00-115692-4%' then 'Veggie Cheese - Burrata'
            when p.skucode like '%DAI-00-005141-4%' then 'Veggie Cheese - Mozzarella'
            when p.skucode like '%DAI-00-005140-4%' then 'Veggie Cheese - Mozzarella'
            when p.skucode like '%DAI-00-129843-4%' then 'Veggie Cheese - Smoked Scamorza'
            when p.skucode like '%DAI-00-115741-4%' then 'Veggie Cheese - Feta'
            when p.skucode like '%DAI-00-005138-4%' then 'Veggie Cheese - Feta'
            when p.skucode like '%DAI-00-121990-4%' then 'Veggie Cheese - Fontal'
            when p.skucode like '%DAI-00-005143-4%' then 'Veggie Cheese - Goat'
            when p.skucode like '%DAI-00-005152-4%' then 'Veggie Cheese - Gorgonzola'
            when p.skucode like '%DAI-00-129764-4%' then 'Veggie Cheese - Lactose free Mozzarella'
            when p.skucode like '%DAI-00-005142-4%' then 'Veggie Cheese - Ricotta'
            when p.skucode like '%DAI-00-105619-4%' then 'Veggie Cheese - Stracchino'
            when p.skucode like '%DAI-00-102741-4%' then 'Veggie Cheese - Stracchino'
            when p.skucode like '%DAI-00-121989-4%' then 'Veggie Cheese - Toma'
            when p.skucode like '%DAI-00-123508-4%' then 'Veggie Cheese - Cheddar'
            when p.skucode like '%PHF-00-102247-1%' then 'Veggie Mushrooms - None'
            when p.skucode like '%PHF-00-122455-4%' then 'Veggie Mushrooms - None'
            when p.skucode like '%PHF-00-102246-1%' then 'Veggie Mushrooms - None'
            when p.skucode like '%PHF-00-102241-1%' then 'Veggie Mushrooms - Shiitake'
            when p.skucode like '%PRO-00-005241-1%' then 'Veggie Canned - Green Peas'
            when p.skucode like '%PRO-00-005240-1%' then 'Veggie Canned - Black Beans'
            when p.skucode like '%PRO-00-005238-1%' then 'Veggie Canned - Cannellini Beans'
            when p.skucode like '%PRO-00-005247-1%' then 'Veggie Canned - Chickpeas'
            when p.skucode like '%PRO-00-005252-1%' then 'Veggie Canned - Lentils'
            when p.skucode like '%PRO-00-005239-1%' then 'Veggie Canned - Red Kidney Beans'
            when p.skucode like '%PRO-00-101164-1%' then 'Veggie Canned - Edamame'
            when p.skucode like '%PRO-00-125287-1%' then 'Veggie Canned - Green Peas'
            end
        when dishtype='Patties/Fritters' then
            case
                when p.skucode like '%PTN-00-122031-4%' then 'Veggie - Seitan'
                when p.skucode like '%PTN-00-130052-4%' then 'Veggie - Chicken Nuggets'
                when p.skucode like '%SPI-00-121306-1%' then 'Veggie - Falafel'
                when p.skucode like '%PTN-00-120459-4%' then 'Veggie - Tofu'
                when p.skucode like '%PTN-00-125162-2%' then 'Egg - Boiled'
                when p.skucode like '%PTN-00-125161-2%' then 'Egg - Scrambled'
                when p.skucode like '%PRO-00-005241-1%' then 'Veggie Canned - Green Peas'
                when p.skucode like '%PRO-00-005240-1%' then 'Veggie Canned - Black Beans'
                when p.skucode like '%PRO-00-005238-1%' then 'Veggie Canned - Cannellini Beans'
                when p.skucode like '%PRO-00-005247-1%' then 'Veggie Canned - Chickpeas'
                when p.skucode like '%PRO-00-005252-1%' then 'Veggie Canned - Lentils'
                when p.skucode like '%PRO-00-005239-1%' then 'Veggie Canned - Red Kidney Beans'
                when p.skucode like '%PRO-00-101164-1%' then 'Veggie Canned - Edamame'
                when p.skucode like '%PRO-00-125287-1%' then 'Veggie Canned - Green Peas'
                when p.skucode like '%PHF-00-102248-1%' then 'Veggie Mushrooms - King Trumpet'
                when p.skucode like '%PHF-00-124387-1%' then 'Veggie Mushrooms - None'
                when p.skucode like '%PHF-00-005113-4%' then 'Veggie Mushrooms - None'
                when p.skucode like '%PHF-00-005113-4%' then 'Veggie Mushrooms - None'
                when p.skucode like '%PHF-00-122456-4%' then 'Veggie Mushrooms - None'
                when p.skucode like '%PHF-00-122456-4%' then 'Veggie Mushrooms - Oyster'
                when p.skucode like '%PHF-00-005115-4%' then 'Veggie Mushrooms - Portobello'
                when p.skucode like '%PHF-00-102239-1%' then 'Veggie Mushrooms - Shiitake'
                when p.skucode like '%DAI-00-129844-4%' then 'Veggie Cheese - Brie'
                when p.skucode like '%DAI-00-005156-4%' then 'Veggie Cheese - Casera'
                when p.skucode like '%DAI-00-005150-4%' then 'Veggie Cheese - Halloumi'
                when p.skucode like '%DAI-00-005150-4%' then 'Veggie Cheese - Halloumi'
                when p.skucode like '%DAI-00-005155-4%' then 'Veggie Cheese - Taleggio'
                when p.skucode like '%DAI-00-115692-4%' then 'Veggie Cheese - Burrata'
                when p.skucode like '%DAI-00-005141-4%' then 'Veggie Cheese - Mozzarella'
                when p.skucode like '%DAI-00-005140-4%' then 'Veggie Cheese - Mozzarella'
                when p.skucode like '%DAI-00-129843-4%' then 'Veggie Cheese - Smoked Scamorza'
                when p.skucode like '%DAI-00-115741-4%' then 'Veggie Cheese - Feta'
                when p.skucode like '%DAI-00-005138-4%' then 'Veggie Cheese - Feta'
                when p.skucode like '%DAI-00-121990-4%' then 'Veggie Cheese - Fontal'
                when p.skucode like '%DAI-00-005143-4%' then 'Veggie Cheese - Goat'
                when p.skucode like '%DAI-00-005152-4%' then 'Veggie Cheese - Gorgonzola'
                when p.skucode like '%DAI-00-129764-4%' then 'Veggie Cheese - Lactose free Mozzarella'
                when p.skucode like '%DAI-00-005142-4%' then 'Veggie Cheese - Ricotta'
                when p.skucode like '%DAI-00-105619-4%' then 'Veggie Cheese - Stracchino'
                when p.skucode like '%DAI-00-102741-4%' then 'Veggie Cheese - Stracchino'
                when p.skucode like '%DAI-00-121989-4%' then 'Veggie Cheese - Toma'
                when p.skucode like '%DAI-00-123508-4%' then 'Veggie Cheese - Cheddar'
                when p.skucode like '%PHF-00-102247-1%' then 'Veggie Mushrooms - None'
                when p.skucode like '%PHF-00-122455-4%' then 'Veggie Mushrooms - None'
                when p.skucode like '%PHF-00-102246-1%' then 'Veggie Mushrooms - None'
                when p.skucode like '%PHF-00-102241-1%' then 'Veggie Mushrooms - Shiitake'
            end
      else 'not available'
      end as primaryptn_check,
      case
            when p.skucode like '%DRY-00-005179-1%' then 'Pasta - Dry'
            when p.skucode like '%DRY-00-005194-1%' then 'Pasta - Dry'
            when p.skucode like '%DRY-00-005192-1%' then 'Pasta - Dry'
            when p.skucode like '%DRY-00-005180-1%' then 'Pasta - Dry'
            when p.skucode like '%DRY-00-125870-1%' then 'Pasta - Dry'
            when p.skucode like '%DRY-00-005210-4%' then 'Pasta - Fresh'
            when p.skucode like '%DRY-00-125906-4%' then 'Pasta - Fresh'
            when p.skucode like '%PHF-00-129309-1%' then 'Potato - None'
            when p.skucode like '%DRY-00-100566-1%' then 'Polenta - None'
            when p.skucode like '%DRY-00-005188-1%' then 'Pasta - Dry'
            when p.skucode like '%DRY-00-127470-4%' then 'Pasta - Fresh'
            when p.skucode like '%DRY-00-102740-1%' then 'Pasta - Wholewheat'
            when p.skucode like '%DRY-00-101228-1%' then 'Grains - Barley'
            when p.skucode like '%DRY-00-101226-1%' then 'Grains - Quinoa'
            when p.skucode like '%BAK-00-005236-1%' then 'Tortilla - None'
            when p.skucode like '%BAK-00-125632-1%' then 'Bread - Bagel'
            when p.skucode like '%BAK-00-124270-1%' then 'Pizza crust - none'
            when p.skucode like '%BAK-00-125633-1%' then 'Tortilla - Piadina'
            when p.skucode like '%DRY-00-125844-1%' then 'Noodles - Udon'
            when p.skucode like '%DRY-00-125935-1%' then 'Polenta - None'
            when p.skucode like '%PHF-00-130116-4%' then 'Potato - None'
            when p.skucode like '%PHF-00-005129-4%' then 'Sweet Potato - None'
            when p.skucode like '%DRY-00-005169-1%' then 'Rice - None'
            when p.skucode like '%DRY-00-005182-1%' then 'Rice - None'
            when p.skucode like '%DRY-00-005166-1%' then 'Rice - None'
            when p.skucode like '%BAK-00-118573-1%' then 'Bread - Naan'
            when p.skucode like '%DRY-00-125936-1%' then 'Pasta - Dry'
            when p.skucode like '%DRY-00-005173-1%' then 'Pasta - Dry'
            when p.skucode like '%DRY-00-005175-1%' then 'Pasta - Dry'
            when p.skucode like '%DRY-00-005189-1%' then 'Pasta - Dry'
            when p.skucode like '%DRY-00-005185-1%' then 'Pasta - Dry'
            when p.skucode like '%DRY-00-127472-4%' then 'Pasta - Fresh'
            when p.skucode like '%DRY-00-127471-4%' then 'Pasta - Fresh'
            when p.skucode like '%DRY-00-005207-4%' then 'Pasta - Fresh'
            when p.skucode like '%BAK-00-128634-1%' then 'Bread - None'
            when p.skucode like '%DRY-00-121316-1%' then 'Rice - Precooked'
            when p.skucode like '%DRY-00-005187-1%' then 'Pasta - Dry'
            when p.skucode like '%DRY-00-005177-1%' then 'Pasta - Dry'
            when p.skucode like '%DRY-00-005191-1%' then 'Pasta - Dry'
            when p.skucode like '%DRY-00-005193-1%' then 'Pasta - Dry'
            when p.skucode like '%DRY-00-005178-1%' then 'Pasta - Dry'
            when p.skucode like '%DRY-00-005205-4%' then 'Pasta - Fresh'
            when p.skucode like '%DRY-00-005201-4%' then 'Pasta - Fresh'
            when p.skucode like '%BAK-00-129175-4%' then 'Pasta - Pasta sfoglia'
            when p.skucode like '%BAK-00-005701-1%' then 'Pinsa - None'
            when p.skucode like '%BAK-00-127040-1%' then 'Bread - Frisella'
            when p.skucode like '%BAK-00-102634-1%' then 'Bread - Taralli'
            when p.skucode like '%BAK-00-125395-1%' then 'Bread - None'
            when p.skucode like '%DRY-00-005384-1%' then 'Noodles - Flat'
            when p.skucode like '%PHF-00-005125-4%' then 'Potato - None'
            when p.skucode like '%DRY-00-102739-1%' then 'Pasta - Wholewheat'
            when p.skucode like '%BAK-00-125631-1%' then 'Bread - Loaf'
            when p.skucode like '%DRY-00-005161-1%' then 'Grains - Bulgur'
            when p.skucode like '%DRY-00-101225-1%' then 'Grains - Quinoa'
            when p.skucode like '%DRY-00-101227-1%' then 'Grains - Barley'
            when p.skucode like '%BAK-00-005235-1%' then 'Tortilla - White Tortilla'
            when p.skucode like '%BAK-00-005233-1%' then 'Bread - Burger Bun'
            when p.skucode like '%DRY-00-005162-1%' then 'Grains - Couscous small'
            when p.skucode like '%DRY-00-005170-1%' then 'Rice - None'
            when p.skucode like '%DRY-00-005168-1%' then 'Rice - None'
            when p.skucode like '%DRY-00-005171-1%' then 'Rice - None'
            when p.skucode like '%DRY-00-005385-1%' then 'Noodles - None'
            when p.skucode like '%PRO-00-005667-1%' then 'Grains - Spelt'
            when p.skucode like '%DRY-00-005165-1%' then 'Grains - Couscous Giant'
            when p.skucode like '%BAK-00-005237-1%' then 'Tortilla - Wholemeal Tortilla'
            when p.skucode like '%BAK-00-125634-1%' then 'Bread - Croutons'
            when p.skucode like '%PHF-00-102250-1%' then 'Potato - None'
            when p.skucode like '%BAK-00-127039-1%' then 'Bread - Taralli'
       else 'not available'
      end as primarysta_check
,
    case
        when p.skucode like '%PHF-00-005077-4%' then 'Cabbage'
        when p.skucode like '%PHF-00-102223-1%' then 'Cabbage'
        when p.skucode like '%PHF-00-100394-1%' then 'Cauliflower'
        when p.skucode like '%PHF-00-005076-4%' then 'Cauliflower'
        when p.skucode like '%PHF-00-005091-4%' then 'Cherry tomatoes'
        when p.skucode like '%PHF-00-005074-4%' then 'Broccoli'
        when p.skucode like '%PHF-00-005114-4%' then 'Mushrooms'
        when p.skucode like '%PHF-00-005093-4%' then 'Cherry tomatoes'
        when p.skucode like '%PHF-00-102526-1%' then 'Spinach'
        when p.skucode like '%PHF-00-127958-4%' then 'Broccoli'
        when p.skucode like '%PHF-00-121652-4%' then 'Cauliflower'
        when p.skucode like '%PHF-00-102369-1%' then 'Chard'
        when p.skucode like '%PHF-00-125622-1%' then 'Erbette'
        when p.skucode like '%PHF-00-100395-1%' then 'Pumpkin'
        when p.skucode like '%PHF-00-005137-4%' then 'Pumpkin'
        when p.skucode like '%PHF-00-101201-4%' then 'Asparagus'
        when p.skucode like '%PHF-00-132587-1%' then 'Aubergine'
        when p.skucode like '%PHF-00-005672-1%' then 'Brussels sprout'
        when p.skucode like '%PHF-00-100396-1%' then 'Radicchio'
        when p.skucode like '%PHF-00-005698-1%' then 'Cavolo nero'
        when p.skucode like '%PHF-00-005087-4%' then 'Cucumber'
        when p.skucode like '%PHF-00-005082-4%' then 'Aubergine'
        when p.skucode like '%PHF-00-121871-1%' then 'Asparagus'
        when p.skucode like '%PHF-00-005090-4%' then 'Cherry tomatoes'
        when p.skucode like '%PHF-00-115864-1%' then 'Cherry tomatoes'
        when p.skucode like '%PHF-00-005131-4%' then 'Green beans'
        when p.skucode like '%PHF-00-122456-4%' then 'Mushrooms'
        when p.skucode like '%PHF-00-124387-1%' then 'Mushrooms'
        when p.skucode like '%PHF-00-102524-1%' then 'Spinach'
        when p.skucode like '%PHF-00-102248-1%' then 'Mushrooms'
        when p.skucode like '%PHF-00-005113-4%' then 'Mushrooms'
        when p.skucode like '%PHF-00-005092-4%' then 'Cherry tomatoes'
        when p.skucode like '%PHF-00-102239-1%' then 'Mushrooms'
        when p.skucode like '%PHF-00-005115-4%' then 'Mushrooms'
        when p.skucode like '%PHF-00-100313-1%' then 'Bell pepper'
        when p.skucode like '%PHF-00-102207-1%' then 'Bok choi'
        when p.skucode like '%PHF-00-125315-4%' then 'Carrot'
        when p.skucode like '%PHF-00-005133-4%' then 'Fennel'
        when p.skucode like '%PHF-00-102213-4%' then 'Pumpkin'
        when p.skucode like '%PHF-00-102350-4%' then 'Salad'
        when p.skucode like '%PHF-00-101206-4%' then 'Tomato'
        when p.skucode like '%PHF-00-130117-4%' then 'Zucchini'
        when p.skucode like '%PHF-00-102211-1%' then 'Zucchini'
        when p.skucode like '%PHF-00-005102-4%' then 'Bell pepper'
        when p.skucode like '%PHF-00-102368-1%' then 'Chard'
        when p.skucode like '%PHF-00-100314-1%' then 'Bell pepper'
        when p.skucode like '%PHF-00-005080-4%' then 'Avocado'
        when p.skucode like '%PHF-00-102212-1%' then 'Cherry tomatoes'
        when p.skucode like '%PHF-00-102210-1%' then 'Cucumber'
        when p.skucode like '%PHF-00-005089-4%' then 'Tomato'
        when p.skucode like '%PHF-00-005135-4%' then 'Radish'
        when p.skucode like '%PHF-00-102247-1%' then 'Mushrooms'
        when p.skucode like '%PHF-00-102241-1%' then 'Mushrooms'
        when p.skucode like '%PHF-00-102246-1%' then 'Mushrooms'
        when p.skucode like '%PHF-00-115866-1%' then 'Carrot'
        when p.skucode like '%PHF-00-005117-4%' then 'Carrot'
        when p.skucode like '%PHF-00-005117-4%' then 'Carrot'
        when p.skucode like '%PHF-00-115865-1%' then 'Carrot'
        when p.skucode like '%PHF-00-005134-4%' then 'Leek'
        when p.skucode like '%PHF-00-102071-1%' then 'Rucola'
        when p.skucode like '%PHF-00-121872-4%' then 'Salad'
        when p.skucode like '%PHF-00-121963-1%' then 'Salad'
        when p.skucode like '%PHF-00-102069-1%' then 'Salad'
        when p.skucode like '%PHF-00-102070-1%' then 'Spinach'
        when p.skucode like '%PHF-00-102237-4%' then 'Salad'
        when p.skucode like '%PHF-00-125822-1%' then 'Onion'
        when p.skucode like '%PHF-00-005127-4%' then 'Onion'
        when p.skucode like '%PHF-00-005127-4%' then 'Onion'
        when p.skucode like '%PHF-00-005120-4%' then 'Onion'
        when p.skucode like '%PHF-00-124096-1%' then 'Onion'
        when p.skucode like '%PHF-00-005122-4%' then 'Shallot'
        when p.skucode like '%PHF-00-115863-4%' then 'Sprout'
        when p.skucode like '%PHF-00-100970-4%' then 'Salad'
        when p.skucode like '%PHF-00-005107-4%' then 'Rucola'
        when p.skucode like '%PHF-00-102238-4%' then 'Salad'
        when p.skucode like '%PHF-00-005139-4%' then 'Sping Onion'
        when p.skucode like '%PHF-00-102228-1%' then 'Pepper'
        when p.skucode like '%PHF-00-005086-4%' then 'Pepper'
    else 'not available'
    end as primaryveg_check
    , case
        when p.skucode like '%PTN-00-101141-2%' then 'Exclude'
        when p.skucode like '%PTN-00-101142-2%' then 'Exclude'
        when p.skucode like '%PTN-00-102003-2%' then 'Exclude'
        when p.skucode like '%PTN-00-125057-2%' then 'Exclude'
        when p.skucode like '%DAI-00-124087-4%' then 'Exclude'
        when p.skucode like '%DAI-00-005147-1%' then 'Exclude'
        when p.skucode like '%PTN-00-127449-2%' then 'Exclude'
        when p.skucode like '%PRO-00-100582-1%' then 'Exclude'
        when p.skucode like '%PRO-00-101012-1%' then 'Exclude'
        when p.skucode like '%PRO-00-005262-1%' then 'Exclude'
        when p.skucode like '%PRO-00-121321-1%' then 'Exclude'
      else 'not available'
      end as prefcs_check
    , phf.phf_quantity
    , phf_extraveg.phf_quantity as phf_quantity_extraveg
    , n.weight_in_grams
    , a.allergens
    , coalesce(pmb.flag_pantry_milk_butter,0) as flag_pantry_milk_butter
    , v.veggie_gram_fiveaday
    , r.target_products
FROM recipe_consolidated_CPS AS r
LEFT JOIN (SELECT * FROM recipe_usage_CPS WHERE region_code = 'it' AND market = 'it') AS u ON u.recipe_code = r.recipe_code
LEFT JOIN (SELECT * FROM nutrition_CPS WHERE market = 'it' AND segment = 'IT') AS n ON n.recipe_id = r.id
LEFT JOIN picklists_IT AS p ON p.unique_recipe_code=r.unique_recipe_code
LEFT JOIN (SELECT * FROM inactiveskus_CPS WHERE market = 'it' AND segment_name = 'IT') AS i ON p.unique_recipe_code = i.unique_recipe_code --and ON p.skucode = i.skucode
LEFT JOIN (SELECT * FROM steps_CPS WHERE market='it') AS steps ON steps.recipe_id = r.id
LEFT JOIN (select * from phf_quantity phf where market='it') phf
    on r.unique_recipe_code = phf.unique_recipe_code
    and r.market = phf.market
    and phf.recipe_type = 'Standard'
-- LEFT JOIN allergens AS a ON r.unique_recipe_code=a.unique_recipe_code
LEFT join (select * from phf_quantity_IT phf where market='it') phf_extraveg
    on r.unique_recipe_code = phf_extraveg.unique_recipe_code
    and r.market = phf_extraveg.market
    and phf_extraveg.recipe_type = 'Standard'
LEFT JOIN allergens_CPS AS a
    ON r.unique_recipe_code=a.unique_recipe_code
    AND r.market = a.market
LEFT JOIN veggie_gram_fiveaday v
    on r.unique_recipe_code = v.unique_recipe_code
    and r.market = v.market
LEFT JOIN pantry_milk_butter as pmb
    on r.id = pmb.recipe_id
    and r.market = pmb.market
WHERE LOWER(r.status) IN ('ready for menu planning', 'in development')
    AND r.market='it'
    AND p.cost2p >0
    AND p.cost4p >0
    AND LOWER(r.recipe_type) <> 'add-ons'
    and r.unique_recipe_code not like '%MOD%'
) temp
WHERE isdefault = 1
)

, all_recipes_BNL as(
select * from(
    select r.id as uuid
    , 'BNL' as country    --upper(r.market) as country
    ,r.unique_recipe_code as uniquerecipecode
    ,r.recipe_code as code
    ,r.version
    ,r.status
    ,regexp_replace(r.title, '\t|\n', '') as title
    ,concat(regexp_replace(r.title, '\t|\n', ''), coalesce(regexp_replace(r.subtitle, '\t|\n', ''),'') ,coalesce (r.primary_protein,''),coalesce(r.primary_starch,''),coalesce(r.cuisine,''), coalesce(r.dish_type,''), coalesce(r.primary_vegetable,'')) as subtitle
    ,r.primary_protein as primaryprotein
    ,r.main_protein as mainprotein
    ,r.protein_cut as proteincut
    ,r.primary_starch as primarystarch
    ,r.main_starch as mainstarch
    ,coalesce(r.primary_vegetable,'none') as primaryvegetable
    ,r.main_vegetable as mainvegetable
    ,CASE WHEN n.fats IS NULL THEN 0 ELSE n.fats END                              AS fats
    ,CASE WHEN n.sugars IS NULL THEN 0 ELSE n.sugars END                          AS sugars
    ,case when n.salt is null then 0 else n.salt end as salt
    ,case when n.energy = 0 or n.energy is null then 999 else n.energy end as calories
    ,case when n.carbs = 0  or n.carbs is null then 999 else n.carbs end as carbohydrates
    ,CASE WHEN n.proteins IS NULL THEN 0 ELSE n.proteins END                      AS proteins_nutrition
    , CASE WHEN n.saturatedfats IS NULL THEN 0 ELSE n.saturatedfats END AS saturatedfats
    ,r.cuisine
    ,r.dish_type as dishtype
    ,case when r.hands_on_time ='' or r.hands_on_time is NULL then cast(0 as double)
    else cast(r.hands_on_time as double) end as handsontime
    ,case when r.hands_on_time ='' or r.hands_on_time is NULL then cast(0 as double)
    else cast(r.hands_on_time as double) end
    +
    case when r.hands_off_time ='' or r.hands_off_time is NULL then cast(0 as double)
    else cast(r.hands_off_time as double)  end as totaltime
    , '' as hqtag
    ,r.tags as tag
    , CASE WHEN r.target_preferences IS NULL OR r.target_preferences = '' THEN 'not available' ELSE r.target_preferences END AS preference
    , concat (r.tags,r.target_preferences) AS preftag
    ,r.recipe_type as producttype --#check this
    ,r.created_by as author
    ,p.skucode
    ,p.skuname
    ,p.skucount
    , i.inactiveskus
    ,i.inactiveskunames
    ,round(p.cost2p,2) as cost2p
    ,round(p.cost4p,2) as cost4p
    ,u.last_used as lastused
    ,case when u.absolute_last_used is NULL then '' else u.absolute_last_used end as absolutelastused
    ,r.is_default as isdefault
    ,dense_rank() over (partition by r.recipe_code, r.market order by r.version  desc) as o
    ,r.updated_at as updated_at
    ,CASE WHEN steps.step_description IS NULL OR steps.step_description LIKE  '% |  |  %' THEN 'not available' ELSE steps.step_description END AS step_description
    ,r.image_url
    -- , a.previous_allergens
    -- , a.current_allergens
    -- , a.allergen_change
    -- , a.allergen_updated_at
    , COALESCE(veg.veggie_gram,0)  as veggie_gram
    , case when r.secondary_protein is null then "not available" else r.secondary_protein end as secondaryprotein
    , case when r.secondary_starch is null then "not available" else r.secondary_starch end as secondarystarch
    , case when r.hands_on_time is null then 0 else r.hands_on_time end as handsontime_min
    , case when r.hands_on_time_max is null then 0 else r.hands_on_time_max end as handsontime_max
    , case when r.hands_off_time is null then 0 else r.hands_off_time end as handsofftime_min
    , case when r.hands_off_time_max is null then 0 else r.hands_off_time_max end as handsofftime_max
    , p.ingredient_id
    , 'not available' as primaryptn_check
    , 'not available' as primarysta_check
    , 'not available' as primaryveg_check
    , 'not available' as prefcs_check
    , 0 as phf_quantity
    , 0 as phf_quantity_extraveg
    , n.weight_in_grams
    , a.allergens
    , coalesce(pmb.flag_pantry_milk_butter,0) as flag_pantry_milk_butter
    , v.veggie_gram_fiveaday
    , r.target_products
from recipe_consolidated_CPS as r
left join recipe_usage_BNL u on u.recipe_code = r.recipe_code
left join (SELECT * FROM nutrition_CPS WHERE market = 'benelux' AND segment = 'NL') n on n.recipe_id = r.id and lower(n.country) = u.region_code
left join picklists_BNL p on p.unique_recipe_code=r.unique_recipe_code
LEFT JOIN (SELECT * FROM inactiveskus_CPS WHERE market = 'benelux' AND segment_name = 'NL') AS i ON p.unique_recipe_code = i.unique_recipe_code --and ON p.skucode = i.skucode -- #add inactive skus cps
LEFT JOIN (SELECT * FROM steps_CPS WHERE market='benelux') AS steps ON steps.recipe_id = r.id --#added steps 
-- LEFT JOIN allergens AS a ON r.unique_recipe_code=a.unique_recipe_code --#added allergens cps
left join veggie_gram_BNL as veg on veg.unique_recipe_code = r.unique_recipe_code
LEFT JOIN allergens_CPS AS a
    ON r.unique_recipe_code=a.unique_recipe_code
    AND r.market = a.market
LEFT JOIN veggie_gram_fiveaday v
    on r.unique_recipe_code = v.unique_recipe_code
    and r.market = v.market
LEFT JOIN pantry_milk_butter as pmb
    on r.id = pmb.recipe_id
    and r.market = pmb.market
where lower(r.status) in ('ready for menu planning', 'under improvement')
    and p.cost2p >0
    and p.cost3p >0
    and p.cost4p >0
    and r.market='benelux'
    and lower(r.brand)='hellofresh'
    and r.is_default=true
    and lower (r.title) not like '%not use%'
    and lower (r.title) not like '%wrong%'
    and lower (r.title) not like '%niet%'
    and lower (r.title) not like 'PLACEH%'
    -- and length (r.primary_protein)>0
    -- and r.primary_protein <>'N/A'
    and substr(r.unique_recipe_code, length(r.unique_recipe_code) - 1) <> 'FR'
    and upper(r.unique_recipe_code) NOT LIKE 'GC%'
    and lower(r.recipe_type) IN ('15-minute meal', 'feast', 'premium 1', 'premium 2', 'standard', 'surcharge - adventurous', 'global cuisine', 'rapid-premium', 'ultimate', 'rapid premium', 'street food')
) temp
where o=1)



, all_recipes_DACH as(
select * from(
        select r.id as uuid
        ,upper(r.market) as country
        ,r.unique_recipe_code as uniquerecipecode
        ,r.recipe_code as code
        ,r.version
        ,r.status
        ,regexp_replace(r.title, '\t|\n', '') as title
        ,concat(regexp_replace(r.title, '\t|\n', ''), coalesce(regexp_replace(r.subtitle, '\t|\n', ''),'') ,coalesce (r.primary_protein,''),coalesce(r.primary_starch,''),coalesce(r.cuisine,''), coalesce(r.dish_type,''), coalesce(r.primary_vegetable,'')) as subtitle
        ,r.primary_protein as primaryprotein
        ,r.main_protein as mainprotein
        ,r.protein_cut as proteincut
        ,r.primary_starch as primarystarch
        ,r.main_starch as mainstarch
        ,coalesce(r.primary_vegetable,'none') as primaryvegetable
        ,r.main_vegetable as mainvegetable
        ,CASE WHEN n.fats IS NULL THEN 0 ELSE n.fats END                              AS fats  --#added manual. validate
        ,CASE WHEN n.sugars IS NULL THEN 0 ELSE n.sugars END                          AS sugars --#added manual. validate
        ,case when n.salt is null then 0 else n.salt end as salt
        ,case when n.energy = 0 or n.energy is null then 999 else n.energy end as calories
        ,case when n.carbs = 0  or n.carbs is null then 999 else n.carbs end as carbohydrates
        ,CASE WHEN n.proteins IS NULL THEN 0 ELSE n.proteins END                      AS proteins_nutrition --#added manual. validate
        , CASE WHEN n.saturatedfats IS NULL THEN 0 ELSE n.saturatedfats END AS saturatedfats
        ,r.cuisine
        ,r.dish_type as dishtype
        ,case when r.hands_on_time ='' or r.hands_on_time is NULL then cast(99 as double)
                else cast(r.hands_on_time as double) end as handsontime
        ,case when r.hands_on_time ='' or r.hands_on_time is NULL then cast(99 as double)
                else cast(r.hands_on_time as double) end
                +
        case when r.hands_off_time ='' or r.hands_off_time is NULL then cast(99 as double)
                else cast(r.hands_off_time as double) end
                as totaltime
        , '' as hqtag --#added manual. validate
        ,r.tags as tag
        , CASE WHEN r.target_preferences IS NULL OR r.target_preferences = '' THEN 'not available' ELSE r.target_preferences END AS preference
        , concat (r.tags,r.target_preferences) AS preftag
        ,r.recipe_type as recipetype
        ,r.created_by as author
        ,p.skucode
        ,p.skuname
        ,p.skucount
        , i.inactiveskus --#added manual. validate
        ,i.inactiveskunames --#added manual. validate
        ,round(p.cost2p,2) as cost2p
        ,round(p.cost4p,2) as cost4p
        ,u.last_used as lastused
        ,case when u.absolute_last_used is NULL then '' else u.absolute_last_used end as absolutelastused
        , r.is_default as isdefault --#added manual. validate
        ,dense_rank() over (partition by r.recipe_code, r.market order by r.version  desc) as o
        ,r.updated_at as updated_at --its not unix timestampW
        ,CASE WHEN steps.step_description IS NULL OR steps.step_description LIKE  '% |  |  %' THEN 'not available' ELSE steps.step_description END AS step_description
        ,r.image_url
        -- , a.previous_allergens
        -- , a.current_allergens
        -- , a.allergen_change
        -- , a.allergen_updated_at
        , 0 as veggie_gram
        , case when r.secondary_protein is null then "not available" else r.secondary_protein end as secondaryprotein
        , case when r.secondary_starch is null then "not available" else r.secondary_starch end as secondarystarch
        , case when r.hands_on_time is null then 0 else r.hands_on_time end as handsontime_min
        , case when r.hands_on_time_max is null then 0 else r.hands_on_time_max end as handsontime_max
        , case when r.hands_off_time is null then 0 else r.hands_off_time end as handsofftime_min
        , case when r.hands_off_time_max is null then 0 else r.hands_off_time_max end as handsofftime_max
        , p.ingredient_id
        , 'not available' as primaryptn_check
        , 'not available' as primarysta_check
        , 'not available' as primaryveg_check
        , 'not available' as prefcs_check
        , 0 as phf_quantity
        , 0 as phf_quantity_extraveg
        , n.weight_in_grams
        , a.allergens
        , coalesce(pmb.flag_pantry_milk_butter,0) as flag_pantry_milk_butter
        , v.veggie_gram_fiveaday
        , r.target_products
from recipe_consolidated_CPS as r
left join (SELECT * FROM recipe_usage_CPS WHERE region_code = 'deat' AND market = 'dach') u on u.recipe_code = r.recipe_code
left join (SELECT * FROM nutrition_CPS WHERE market = 'dach' AND segment = 'DE') n on n.recipe_id = r.id
left join picklists_DACH p on p.unique_recipe_code=r.unique_recipe_code
LEFT JOIN (SELECT * FROM inactiveskus_CPS WHERE market = 'dach' AND segment_name = 'DE') AS i ON p.unique_recipe_code = i.unique_recipe_code --and ON p.skucode = i.skucode
LEFT JOIN (SELECT * FROM steps_CPS WHERE market='dach') AS steps ON steps.recipe_id = r.id
-- LEFT JOIN allergens AS a ON r.unique_recipe_code=a.unique_recipe_code
LEFT JOIN allergens_CPS AS a
    ON r.unique_recipe_code=a.unique_recipe_code
    AND r.market = a.market
LEFT JOIN veggie_gram_fiveaday v
    on r.unique_recipe_code = v.unique_recipe_code
    and r.market = v.market
LEFT JOIN pantry_milk_butter as pmb
    on r.id = pmb.recipe_id
    and r.market = pmb.market
where 1=1
    and lower(status)  in ('ready for menu planning','pool','rework', 'operation issue version', 'ingredient test', 'optimization test')
    and  r.market='dach'
    and lower(r.title) not like '%not use%' and lower(r.title) not like '%wrong%'
    -- and length(r.primary_protein)>0
    -- and r.primary_protein <>'N/A'
    and r.unique_recipe_code not like 'TEST%'
    and r.unique_recipe_code not like 'HE%'
    and r.unique_recipe_code not like 'ADD%'
    and r.unique_recipe_code not like 'Add%'
    and r.unique_recipe_code not like 'CO%'
    and r.unique_recipe_code not like 'XMAS%'
    and r.recipe_code not like '%TM'
    -- and  p.cost2p >0
    -- and  p.cost3p >0
    -- and  p.cost4p >0
) temp
where isdefault=True)


, all_recipes_GQ as(
select * from(
    select r.id as uuid
    , 'GQ' as country    --upper(r.market) as country
    ,r.unique_recipe_code as uniquerecipecode
    ,r.recipe_code as code
    ,r.version
    ,r.status
    ,regexp_replace(r.title, '\t|\n', '') as title
    ,concat(regexp_replace(r.title, '\t|\n', ''), coalesce(regexp_replace(r.subtitle, '\t|\n', ''),'') ,coalesce (r.primary_protein,''),coalesce(r.primary_starch,''),coalesce(r.cuisine,''), coalesce(r.dish_type,''), coalesce(r.primary_vegetable,'')) as subtitle
    ,r.primary_protein as primaryprotein
    ,r.main_protein as mainprotein
    ,r.protein_cut as proteincut
    ,r.primary_starch as primarystarch
    ,r.main_starch as mainstarch
    ,coalesce(r.primary_vegetable,'none') as primaryvegetable
    ,r.main_vegetable as mainvegetable
    ,CASE WHEN n.fats IS NULL THEN 0 ELSE n.fats END                              AS fats
    ,CASE WHEN n.sugars IS NULL THEN 0 ELSE n.sugars END                          AS sugars
    ,case when n.salt is null then 0 else n.salt end as salt
    ,case when n.energy = 0 or n.energy is null then 999 else n.energy end as calories
    ,case when n.carbs = 0  or n.carbs is null then 999 else n.carbs end as carbohydrates
    ,CASE WHEN n.proteins IS NULL THEN 0 ELSE n.proteins END                      AS proteins_nutrition
    , CASE WHEN n.saturatedfats IS NULL THEN 0 ELSE n.saturatedfats END AS saturatedfats
    ,r.cuisine
    ,r.dish_type as dishtype
    ,case when r.hands_on_time ='' or r.hands_on_time is NULL then cast(0 as double)
    else cast(r.hands_on_time as double) end as handsontime
    ,case when r.hands_on_time ='' or r.hands_on_time is NULL then cast(0 as double)
    else cast(r.hands_on_time as double) end
    +
    case when r.hands_off_time ='' or r.hands_off_time is NULL then cast(0 as double)
    else cast(r.hands_off_time as double)  end as totaltime
    , '' as hqtag
    ,r.tags as tag
    , CASE WHEN r.target_preferences IS NULL OR r.target_preferences = '' THEN 'not available' ELSE r.target_preferences END AS preference
    , concat (r.tags,r.target_preferences) AS preftag
    ,r.recipe_type as producttype --#check this
    ,r.created_by as author
    ,p.skucode
    ,p.skuname
    ,p.skucount
    , i.inactiveskus
    ,i.inactiveskunames
    ,round(p.cost2p,2) as cost2p
    ,round(p.cost4p,2) as cost4p
    ,u.last_used as lastused
    ,case when u.absolute_last_used is NULL then '' else u.absolute_last_used end as absolutelastused
    ,r.is_default as isdefault
    ,dense_rank() over (partition by r.recipe_code, r.market order by r.version  desc) as o
    ,r.updated_at as updated_at
    ,CASE WHEN steps.step_description IS NULL OR steps.step_description LIKE  '% |  |  %' THEN 'not available' ELSE steps.step_description END AS step_description
    ,r.image_url
    -- , a.previous_allergens
    -- , a.current_allergens
    -- , a.allergen_change
    -- , a.allergen_updated_at
    , COALESCE(veg.veggie_gram,0)  as veggie_gram
    , case when r.secondary_protein is null then "not available" else r.secondary_protein end as secondaryprotein
    , case when r.secondary_starch is null then "not available" else r.secondary_starch end as secondarystarch
    , case when r.hands_on_time is null then 0 else r.hands_on_time end as handsontime_min
    , case when r.hands_on_time_max is null then 0 else r.hands_on_time_max end as handsontime_max
    , case when r.hands_off_time is null then 0 else r.hands_off_time end as handsofftime_min
    , case when r.hands_off_time_max is null then 0 else r.hands_off_time_max end as handsofftime_max
    , p.ingredient_id
    , 'not available' as primaryptn_check
    , 'not available' as primarysta_check
    , 'not available' as primaryveg_check
    , 'not available' as prefcs_check
    , 0 as phf_quantity
    , 0 as phf_quantity_extraveg
    , n.weight_in_grams
    , a.allergens
    , coalesce(pmb.flag_pantry_milk_butter,0) as flag_pantry_milk_butter
    , v.veggie_gram_fiveaday
    , r.target_products
from recipe_consolidated_CPS as r
left join recipe_usage_GQ u on u.recipe_code = r.recipe_code
left join (SELECT * FROM nutrition_CPS WHERE market = 'benelux' AND segment = 'NL') n on n.recipe_id = r.id and lower(n.country) = u.region_code
left join picklists_GQ p on p.unique_recipe_code=r.unique_recipe_code
LEFT JOIN (SELECT * FROM inactiveskus_CPS WHERE market = 'benelux' AND segment_name = 'NL') AS i ON p.unique_recipe_code = i.unique_recipe_code --and ON p.skucode = i.skucode -- #add inactive skus cps
LEFT JOIN (SELECT * FROM steps_CPS WHERE market='benelux') AS steps ON steps.recipe_id = r.id --#added steps 
left join veggie_gram_BNL as veg on veg.unique_recipe_code = r.unique_recipe_code
left join materialized_views.culinary_services_recipe_editorial_translations tr on r.id = tr.recipe_id and 'en-NL' = tr.locale
LEFT JOIN allergens_CPS AS a
    ON r.unique_recipe_code=a.unique_recipe_code
    AND r.market = a.market
LEFT JOIN veggie_gram_fiveaday v
    on r.unique_recipe_code = v.unique_recipe_code
    and r.market = v.market
LEFT JOIN pantry_milk_butter as pmb
    on r.id = pmb.recipe_id
    and r.market = pmb.market
where 1=1
    -- and p.cost2p >0
    -- and p.cost3p >0
    -- and p.cost4p >0
    and lower(status)  in ('ready for menu planning')
    and r.market='benelux'
    and lower(r.brand)='green chef'
    and r.is_default=true
    and lower (tr.title) not like '%not use%'
    and lower (tr.title) not like '%wrong%'
    and lower (tr.title) not like '%niet%'
    and lower (tr.title) not like 'PLACEH%'
    and length (r.primary_protein)>0
    and r.primary_protein <>'N/A'
    and substr(r.unique_recipe_code, length(r.unique_recipe_code) - 1) <> 'FR'
    and upper(r.unique_recipe_code) LIKE 'GC%'

) temp
where o=1)


, int_recipepool AS (
select a.*,
t0.hellofresh_week as hellofreshweek_t0,
t10.hellofresh_week as hellofreshweek_t10
from (
        SELECT DISTINCT * FROM all_recipes_DACH
        UNION ALL
        SELECT DISTINCT * FROM all_recipes_DKSE
        UNION ALL
        SELECT DISTINCT * FROM all_recipes_ES
        UNION ALL
        SELECT DISTINCT * FROM all_recipes_FR
        UNION ALL
        SELECT DISTINCT * FROM all_recipes_GB
        UNION ALL
        SELECT DISTINCT * FROM all_recipes_IE
        UNION ALL
        SELECT DISTINCT * FROM all_recipes_IT
        UNION ALL
        SELECT DISTINCT * FROM all_recipes_BNL
        UNION ALL
        SELECT DISTINCT * FROM all_recipes_GQ

) a
left join dates_filter_t0 t0
    on 1=1
left join dates_filter_t10 t10
    on 1=1
)

select * from int_recipepopol


-- --FROM original queries by GAMP AND with modifications/additions made by @Hannah Hernalin and @Keith Quinita 2024-06-03---
